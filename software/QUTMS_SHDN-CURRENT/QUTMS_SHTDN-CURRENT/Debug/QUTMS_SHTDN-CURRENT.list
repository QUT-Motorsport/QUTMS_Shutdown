
QUTMS_SHTDN-CURRENT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080025a4  080025a4  000125a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025f0  080025f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080025f0  080025f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025f0  080025f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025f0  080025f0  000125f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025f4  080025f4  000125f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08002604  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002604  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007087  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000174e  00000000  00000000  000270bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000788  00000000  00000000  00028810  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a0  00000000  00000000  00028f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014763  00000000  00000000  00029638  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007639  00000000  00000000  0003dd9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f6bc  00000000  00000000  000453d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b4a90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018e4  00000000  00000000  000b4b0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800258c 	.word	0x0800258c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800258c 	.word	0x0800258c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 8000234:	4b18      	ldr	r3, [pc, #96]	; (8000298 <MX_CAN_Init+0x68>)
 8000236:	4a19      	ldr	r2, [pc, #100]	; (800029c <MX_CAN_Init+0x6c>)
 8000238:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800023a:	4b17      	ldr	r3, [pc, #92]	; (8000298 <MX_CAN_Init+0x68>)
 800023c:	2210      	movs	r2, #16
 800023e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000240:	4b15      	ldr	r3, [pc, #84]	; (8000298 <MX_CAN_Init+0x68>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000246:	4b14      	ldr	r3, [pc, #80]	; (8000298 <MX_CAN_Init+0x68>)
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 800024c:	4b12      	ldr	r3, [pc, #72]	; (8000298 <MX_CAN_Init+0x68>)
 800024e:	2280      	movs	r2, #128	; 0x80
 8000250:	0312      	lsls	r2, r2, #12
 8000252:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000254:	4b10      	ldr	r3, [pc, #64]	; (8000298 <MX_CAN_Init+0x68>)
 8000256:	22e0      	movs	r2, #224	; 0xe0
 8000258:	03d2      	lsls	r2, r2, #15
 800025a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800025c:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <MX_CAN_Init+0x68>)
 800025e:	2200      	movs	r2, #0
 8000260:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000262:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <MX_CAN_Init+0x68>)
 8000264:	2200      	movs	r2, #0
 8000266:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000268:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <MX_CAN_Init+0x68>)
 800026a:	2200      	movs	r2, #0
 800026c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800026e:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <MX_CAN_Init+0x68>)
 8000270:	2200      	movs	r2, #0
 8000272:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <MX_CAN_Init+0x68>)
 8000276:	2200      	movs	r2, #0
 8000278:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800027a:	4b07      	ldr	r3, [pc, #28]	; (8000298 <MX_CAN_Init+0x68>)
 800027c:	2200      	movs	r2, #0
 800027e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <MX_CAN_Init+0x68>)
 8000282:	0018      	movs	r0, r3
 8000284:	f000 fb12 	bl	80008ac <HAL_CAN_Init>
 8000288:	1e03      	subs	r3, r0, #0
 800028a:	d001      	beq.n	8000290 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800028c:	f000 f978 	bl	8000580 <Error_Handler>
  }

}
 8000290:	46c0      	nop			; (mov r8, r8)
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	20000028 	.word	0x20000028
 800029c:	40006400 	.word	0x40006400

080002a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a8:	2314      	movs	r3, #20
 80002aa:	18fb      	adds	r3, r7, r3
 80002ac:	0018      	movs	r0, r3
 80002ae:	2314      	movs	r3, #20
 80002b0:	001a      	movs	r2, r3
 80002b2:	2100      	movs	r1, #0
 80002b4:	f002 f962 	bl	800257c <memset>
  if(canHandle->Instance==CAN)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a1d      	ldr	r2, [pc, #116]	; (8000334 <HAL_CAN_MspInit+0x94>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d133      	bne.n	800032a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002c2:	4b1d      	ldr	r3, [pc, #116]	; (8000338 <HAL_CAN_MspInit+0x98>)
 80002c4:	69da      	ldr	r2, [r3, #28]
 80002c6:	4b1c      	ldr	r3, [pc, #112]	; (8000338 <HAL_CAN_MspInit+0x98>)
 80002c8:	2180      	movs	r1, #128	; 0x80
 80002ca:	0489      	lsls	r1, r1, #18
 80002cc:	430a      	orrs	r2, r1
 80002ce:	61da      	str	r2, [r3, #28]
 80002d0:	4b19      	ldr	r3, [pc, #100]	; (8000338 <HAL_CAN_MspInit+0x98>)
 80002d2:	69da      	ldr	r2, [r3, #28]
 80002d4:	2380      	movs	r3, #128	; 0x80
 80002d6:	049b      	lsls	r3, r3, #18
 80002d8:	4013      	ands	r3, r2
 80002da:	613b      	str	r3, [r7, #16]
 80002dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002de:	4b16      	ldr	r3, [pc, #88]	; (8000338 <HAL_CAN_MspInit+0x98>)
 80002e0:	695a      	ldr	r2, [r3, #20]
 80002e2:	4b15      	ldr	r3, [pc, #84]	; (8000338 <HAL_CAN_MspInit+0x98>)
 80002e4:	2180      	movs	r1, #128	; 0x80
 80002e6:	0289      	lsls	r1, r1, #10
 80002e8:	430a      	orrs	r2, r1
 80002ea:	615a      	str	r2, [r3, #20]
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <HAL_CAN_MspInit+0x98>)
 80002ee:	695a      	ldr	r2, [r3, #20]
 80002f0:	2380      	movs	r3, #128	; 0x80
 80002f2:	029b      	lsls	r3, r3, #10
 80002f4:	4013      	ands	r3, r2
 80002f6:	60fb      	str	r3, [r7, #12]
 80002f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80002fa:	2114      	movs	r1, #20
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	22c0      	movs	r2, #192	; 0xc0
 8000300:	0152      	lsls	r2, r2, #5
 8000302:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2202      	movs	r2, #2
 8000308:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2203      	movs	r2, #3
 8000314:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2204      	movs	r2, #4
 800031a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031c:	187a      	adds	r2, r7, r1
 800031e:	2390      	movs	r3, #144	; 0x90
 8000320:	05db      	lsls	r3, r3, #23
 8000322:	0011      	movs	r1, r2
 8000324:	0018      	movs	r0, r3
 8000326:	f000 fd99 	bl	8000e5c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	b00a      	add	sp, #40	; 0x28
 8000330:	bd80      	pop	{r7, pc}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	40006400 	.word	0x40006400
 8000338:	40021000 	.word	0x40021000

0800033c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800033c:	b590      	push	{r4, r7, lr}
 800033e:	b089      	sub	sp, #36	; 0x24
 8000340:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	240c      	movs	r4, #12
 8000344:	193b      	adds	r3, r7, r4
 8000346:	0018      	movs	r0, r3
 8000348:	2314      	movs	r3, #20
 800034a:	001a      	movs	r2, r3
 800034c:	2100      	movs	r1, #0
 800034e:	f002 f915 	bl	800257c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000352:	4b1c      	ldr	r3, [pc, #112]	; (80003c4 <MX_GPIO_Init+0x88>)
 8000354:	695a      	ldr	r2, [r3, #20]
 8000356:	4b1b      	ldr	r3, [pc, #108]	; (80003c4 <MX_GPIO_Init+0x88>)
 8000358:	2180      	movs	r1, #128	; 0x80
 800035a:	02c9      	lsls	r1, r1, #11
 800035c:	430a      	orrs	r2, r1
 800035e:	615a      	str	r2, [r3, #20]
 8000360:	4b18      	ldr	r3, [pc, #96]	; (80003c4 <MX_GPIO_Init+0x88>)
 8000362:	695a      	ldr	r2, [r3, #20]
 8000364:	2380      	movs	r3, #128	; 0x80
 8000366:	02db      	lsls	r3, r3, #11
 8000368:	4013      	ands	r3, r2
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <MX_GPIO_Init+0x88>)
 8000370:	695a      	ldr	r2, [r3, #20]
 8000372:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <MX_GPIO_Init+0x88>)
 8000374:	2180      	movs	r1, #128	; 0x80
 8000376:	0289      	lsls	r1, r1, #10
 8000378:	430a      	orrs	r2, r1
 800037a:	615a      	str	r2, [r3, #20]
 800037c:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <MX_GPIO_Init+0x88>)
 800037e:	695a      	ldr	r2, [r3, #20]
 8000380:	2380      	movs	r3, #128	; 0x80
 8000382:	029b      	lsls	r3, r3, #10
 8000384:	4013      	ands	r3, r2
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5, GPIO_PIN_RESET);
 800038a:	490f      	ldr	r1, [pc, #60]	; (80003c8 <MX_GPIO_Init+0x8c>)
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_GPIO_Init+0x90>)
 800038e:	2200      	movs	r2, #0
 8000390:	0018      	movs	r0, r3
 8000392:	f000 fecb 	bl	800112c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB15 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5;
 8000396:	0021      	movs	r1, r4
 8000398:	187b      	adds	r3, r7, r1
 800039a:	4a0b      	ldr	r2, [pc, #44]	; (80003c8 <MX_GPIO_Init+0x8c>)
 800039c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2201      	movs	r2, #1
 80003a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2200      	movs	r2, #0
 80003ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	4a06      	ldr	r2, [pc, #24]	; (80003cc <MX_GPIO_Init+0x90>)
 80003b4:	0019      	movs	r1, r3
 80003b6:	0010      	movs	r0, r2
 80003b8:	f000 fd50 	bl	8000e5c <HAL_GPIO_Init>

}
 80003bc:	46c0      	nop			; (mov r8, r8)
 80003be:	46bd      	mov	sp, r7
 80003c0:	b009      	add	sp, #36	; 0x24
 80003c2:	bd90      	pop	{r4, r7, pc}
 80003c4:	40021000 	.word	0x40021000
 80003c8:	0000c020 	.word	0x0000c020
 80003cc:	48000400 	.word	0x48000400

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b590      	push	{r4, r7, lr}
 80003d2:	b0c1      	sub	sp, #260	; 0x104
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
 char msg[256];

	TxHeader.ExtId = 0x02;
 80003d6:	4b36      	ldr	r3, [pc, #216]	; (80004b0 <main+0xe0>)
 80003d8:	2202      	movs	r2, #2
 80003da:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_EXT;
 80003dc:	4b34      	ldr	r3, [pc, #208]	; (80004b0 <main+0xe0>)
 80003de:	2204      	movs	r2, #4
 80003e0:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80003e2:	4b33      	ldr	r3, [pc, #204]	; (80004b0 <main+0xe0>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 80003e8:	4b31      	ldr	r3, [pc, #196]	; (80004b0 <main+0xe0>)
 80003ea:	2202      	movs	r2, #2
 80003ec:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80003ee:	4b30      	ldr	r3, [pc, #192]	; (80004b0 <main+0xe0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f4:	f000 f9d4 	bl	80007a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f8:	f000 f86a 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fc:	f7ff ff9e 	bl	800033c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000400:	f000 f90e 	bl	8000620 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000404:	f7ff ff14 	bl	8000230 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000408:	4b2a      	ldr	r3, [pc, #168]	; (80004b4 <main+0xe4>)
 800040a:	0018      	movs	r0, r3
 800040c:	f000 fb4c 	bl	8000aa8 <HAL_CAN_Start>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d001      	beq.n	8000418 <main+0x48>
    {
      Error_Handler();
 8000414:	f000 f8b4 	bl	8000580 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(msg, "test");
 8000418:	003b      	movs	r3, r7
 800041a:	4a27      	ldr	r2, [pc, #156]	; (80004b8 <main+0xe8>)
 800041c:	6811      	ldr	r1, [r2, #0]
 800041e:	6019      	str	r1, [r3, #0]
 8000420:	7912      	ldrb	r2, [r2, #4]
 8000422:	711a      	strb	r2, [r3, #4]
	  	  HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg), HAL_MAX_DELAY);
 8000424:	003b      	movs	r3, r7
 8000426:	0018      	movs	r0, r3
 8000428:	f7ff fe6e 	bl	8000108 <strlen>
 800042c:	0003      	movs	r3, r0
 800042e:	b29a      	uxth	r2, r3
 8000430:	2301      	movs	r3, #1
 8000432:	425b      	negs	r3, r3
 8000434:	0039      	movs	r1, r7
 8000436:	4821      	ldr	r0, [pc, #132]	; (80004bc <main+0xec>)
 8000438:	f001 fcd6 	bl	8001de8 <HAL_UART_Transmit>


	  		TxData[0] = 0;//vol_low;
 800043c:	4b20      	ldr	r3, [pc, #128]	; (80004c0 <main+0xf0>)
 800043e:	2200      	movs	r2, #0
 8000440:	701a      	strb	r2, [r3, #0]
	  		TxData[1] = 1;//vol_high;
 8000442:	4b1f      	ldr	r3, [pc, #124]	; (80004c0 <main+0xf0>)
 8000444:	2201      	movs	r2, #1
 8000446:	705a      	strb	r2, [r3, #1]
	  		// Request transmisison
	  					if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox)
 8000448:	4b1e      	ldr	r3, [pc, #120]	; (80004c4 <main+0xf4>)
 800044a:	4a1d      	ldr	r2, [pc, #116]	; (80004c0 <main+0xf0>)
 800044c:	4918      	ldr	r1, [pc, #96]	; (80004b0 <main+0xe0>)
 800044e:	4819      	ldr	r0, [pc, #100]	; (80004b4 <main+0xe4>)
 8000450:	f000 fb70 	bl	8000b34 <HAL_CAN_AddTxMessage>
 8000454:	1e03      	subs	r3, r0, #0
 8000456:	d011      	beq.n	800047c <main+0xac>
	  							!= HAL_OK) {
	  						sprintf(msg, "can error\r\n");
 8000458:	003b      	movs	r3, r7
 800045a:	4a1b      	ldr	r2, [pc, #108]	; (80004c8 <main+0xf8>)
 800045c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800045e:	c313      	stmia	r3!, {r0, r1, r4}
	  								HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000460:	003b      	movs	r3, r7
 8000462:	0018      	movs	r0, r3
 8000464:	f7ff fe50 	bl	8000108 <strlen>
 8000468:	0003      	movs	r3, r0
 800046a:	b29a      	uxth	r2, r3
 800046c:	2301      	movs	r3, #1
 800046e:	425b      	negs	r3, r3
 8000470:	0039      	movs	r1, r7
 8000472:	4812      	ldr	r0, [pc, #72]	; (80004bc <main+0xec>)
 8000474:	f001 fcb8 	bl	8001de8 <HAL_UART_Transmit>
	  										HAL_MAX_DELAY);
	  						Error_Handler();
 8000478:	f000 f882 	bl	8000580 <Error_Handler>
	  					}

	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	021b      	lsls	r3, r3, #8
 8000480:	4812      	ldr	r0, [pc, #72]	; (80004cc <main+0xfc>)
 8000482:	2200      	movs	r2, #0
 8000484:	0019      	movs	r1, r3
 8000486:	f000 fe51 	bl	800112c <HAL_GPIO_WritePin>

	  		HAL_Delay(1000);
 800048a:	23fa      	movs	r3, #250	; 0xfa
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	0018      	movs	r0, r3
 8000490:	f000 f9ea 	bl	8000868 <HAL_Delay>

	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	021b      	lsls	r3, r3, #8
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <main+0xfc>)
 800049a:	2201      	movs	r2, #1
 800049c:	0019      	movs	r1, r3
 800049e:	f000 fe45 	bl	800112c <HAL_GPIO_WritePin>

	  		HAL_Delay(1000);
 80004a2:	23fa      	movs	r3, #250	; 0xfa
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 f9de 	bl	8000868 <HAL_Delay>
  {
 80004ac:	e7b4      	b.n	8000418 <main+0x48>
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	2000005c 	.word	0x2000005c
 80004b4:	20000028 	.word	0x20000028
 80004b8:	080025a4 	.word	0x080025a4
 80004bc:	20000074 	.word	0x20000074
 80004c0:	20000050 	.word	0x20000050
 80004c4:	20000058 	.word	0x20000058
 80004c8:	080025ac 	.word	0x080025ac
 80004cc:	48000400 	.word	0x48000400

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b099      	sub	sp, #100	; 0x64
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	242c      	movs	r4, #44	; 0x2c
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	0018      	movs	r0, r3
 80004dc:	2334      	movs	r3, #52	; 0x34
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f002 f84b 	bl	800257c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e6:	231c      	movs	r3, #28
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	0018      	movs	r0, r3
 80004ec:	2310      	movs	r3, #16
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f002 f843 	bl	800257c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	0018      	movs	r0, r3
 80004fa:	2318      	movs	r3, #24
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f002 f83c 	bl	800257c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000504:	0021      	movs	r1, r4
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2202      	movs	r2, #2
 800050a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2201      	movs	r2, #1
 8000510:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2210      	movs	r2, #16
 8000516:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2200      	movs	r2, #0
 800051c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051e:	187b      	adds	r3, r7, r1
 8000520:	0018      	movs	r0, r3
 8000522:	f000 fe21 	bl	8001168 <HAL_RCC_OscConfig>
 8000526:	1e03      	subs	r3, r0, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800052a:	f000 f829 	bl	8000580 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052e:	211c      	movs	r1, #28
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2207      	movs	r2, #7
 8000534:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2100      	movs	r1, #0
 800054c:	0018      	movs	r0, r3
 800054e:	f001 f991 	bl	8001874 <HAL_RCC_ClockConfig>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000556:	f000 f813 	bl	8000580 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2201      	movs	r2, #1
 800055e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	0018      	movs	r0, r3
 800056a:	f001 fafb 	bl	8001b64 <HAL_RCCEx_PeriphCLKConfig>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000572:	f000 f805 	bl	8000580 <Error_Handler>
  }
}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b019      	add	sp, #100	; 0x64
 800057c:	bd90      	pop	{r4, r7, pc}
	...

08000580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	021b      	lsls	r3, r3, #8
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <Error_Handler+0x18>)
 800058a:	2200      	movs	r2, #0
 800058c:	0019      	movs	r1, r3
 800058e:	f000 fdcd 	bl	800112c <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	48000400 	.word	0x48000400

0800059c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <HAL_MspInit+0x44>)
 80005a4:	699a      	ldr	r2, [r3, #24]
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_MspInit+0x44>)
 80005a8:	2101      	movs	r1, #1
 80005aa:	430a      	orrs	r2, r1
 80005ac:	619a      	str	r2, [r3, #24]
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <HAL_MspInit+0x44>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	2201      	movs	r2, #1
 80005b4:	4013      	ands	r3, r2
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <HAL_MspInit+0x44>)
 80005bc:	69da      	ldr	r2, [r3, #28]
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_MspInit+0x44>)
 80005c0:	2180      	movs	r1, #128	; 0x80
 80005c2:	0549      	lsls	r1, r1, #21
 80005c4:	430a      	orrs	r2, r1
 80005c6:	61da      	str	r2, [r3, #28]
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <HAL_MspInit+0x44>)
 80005ca:	69da      	ldr	r2, [r3, #28]
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	055b      	lsls	r3, r3, #21
 80005d0:	4013      	ands	r3, r2
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b002      	add	sp, #8
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	40021000 	.word	0x40021000

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <HardFault_Handler+0x4>

080005f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800060c:	f000 f910 	bl	8000830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <MX_USART1_UART_Init+0x5c>)
 8000628:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_USART1_UART_Init+0x58>)
 800062c:	2296      	movs	r2, #150	; 0x96
 800062e:	0212      	lsls	r2, r2, #8
 8000630:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_USART1_UART_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_USART1_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_USART1_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000664:	0018      	movs	r0, r3
 8000666:	f001 fb6b 	bl	8001d40 <HAL_UART_Init>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800066e:	f7ff ff87 	bl	8000580 <Error_Handler>
  }

}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000074 	.word	0x20000074
 800067c:	40013800 	.word	0x40013800

08000680 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	2314      	movs	r3, #20
 800068a:	18fb      	adds	r3, r7, r3
 800068c:	0018      	movs	r0, r3
 800068e:	2314      	movs	r3, #20
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f001 ff72 	bl	800257c <memset>
  if(uartHandle->Instance==USART1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a1d      	ldr	r2, [pc, #116]	; (8000714 <HAL_UART_MspInit+0x94>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d133      	bne.n	800070a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006a2:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <HAL_UART_MspInit+0x98>)
 80006a4:	699a      	ldr	r2, [r3, #24]
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <HAL_UART_MspInit+0x98>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	01c9      	lsls	r1, r1, #7
 80006ac:	430a      	orrs	r2, r1
 80006ae:	619a      	str	r2, [r3, #24]
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <HAL_UART_MspInit+0x98>)
 80006b2:	699a      	ldr	r2, [r3, #24]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	01db      	lsls	r3, r3, #7
 80006b8:	4013      	ands	r3, r2
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <HAL_UART_MspInit+0x98>)
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <HAL_UART_MspInit+0x98>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	0289      	lsls	r1, r1, #10
 80006c8:	430a      	orrs	r2, r1
 80006ca:	615a      	str	r2, [r3, #20]
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_UART_MspInit+0x98>)
 80006ce:	695a      	ldr	r2, [r3, #20]
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	029b      	lsls	r3, r3, #10
 80006d4:	4013      	ands	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006da:	2114      	movs	r1, #20
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	22c0      	movs	r2, #192	; 0xc0
 80006e0:	00d2      	lsls	r2, r2, #3
 80006e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2202      	movs	r2, #2
 80006e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2203      	movs	r2, #3
 80006f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2201      	movs	r2, #1
 80006fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	187a      	adds	r2, r7, r1
 80006fe:	2390      	movs	r3, #144	; 0x90
 8000700:	05db      	lsls	r3, r3, #23
 8000702:	0011      	movs	r1, r2
 8000704:	0018      	movs	r0, r3
 8000706:	f000 fba9 	bl	8000e5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b00a      	add	sp, #40	; 0x28
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	40013800 	.word	0x40013800
 8000718:	40021000 	.word	0x40021000

0800071c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800071c:	4813      	ldr	r0, [pc, #76]	; (800076c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800071e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000720:	4813      	ldr	r0, [pc, #76]	; (8000770 <LoopForever+0x6>)
    LDR R1, [R0]
 8000722:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000724:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000726:	4a13      	ldr	r2, [pc, #76]	; (8000774 <LoopForever+0xa>)
    CMP R1, R2
 8000728:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800072a:	d105      	bne.n	8000738 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800072c:	4812      	ldr	r0, [pc, #72]	; (8000778 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800072e:	4913      	ldr	r1, [pc, #76]	; (800077c <LoopForever+0x12>)
    STR R1, [R0]
 8000730:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000732:	4813      	ldr	r0, [pc, #76]	; (8000780 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000734:	4913      	ldr	r1, [pc, #76]	; (8000784 <LoopForever+0x1a>)
    STR R1, [R0]
 8000736:	6001      	str	r1, [r0, #0]

08000738 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000738:	4813      	ldr	r0, [pc, #76]	; (8000788 <LoopForever+0x1e>)
  ldr r1, =_edata
 800073a:	4914      	ldr	r1, [pc, #80]	; (800078c <LoopForever+0x22>)
  ldr r2, =_sidata
 800073c:	4a14      	ldr	r2, [pc, #80]	; (8000790 <LoopForever+0x26>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000740:	e002      	b.n	8000748 <LoopCopyDataInit>

08000742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000746:	3304      	adds	r3, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800074c:	d3f9      	bcc.n	8000742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074e:	4a11      	ldr	r2, [pc, #68]	; (8000794 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000750:	4c11      	ldr	r4, [pc, #68]	; (8000798 <LoopForever+0x2e>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000754:	e001      	b.n	800075a <LoopFillZerobss>

08000756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000758:	3204      	adds	r2, #4

0800075a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800075c:	d3fb      	bcc.n	8000756 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800075e:	f7ff ff5a 	bl	8000616 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000762:	f001 fee7 	bl	8002534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000766:	f7ff fe33 	bl	80003d0 <main>

0800076a <LoopForever>:

LoopForever:
    b LoopForever
 800076a:	e7fe      	b.n	800076a <LoopForever>
  ldr   r0, =_estack
 800076c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000770:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000774:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000778:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800077c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000780:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000784:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800078c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000790:	080025f8 	.word	0x080025f8
  ldr r2, =_sbss
 8000794:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000798:	200000f8 	.word	0x200000f8

0800079c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC1_IRQHandler>
	...

080007a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <HAL_Init+0x24>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_Init+0x24>)
 80007aa:	2110      	movs	r1, #16
 80007ac:	430a      	orrs	r2, r1
 80007ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007b0:	2000      	movs	r0, #0
 80007b2:	f000 f809 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b6:	f7ff fef1 	bl	800059c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ba:	2300      	movs	r3, #0
}
 80007bc:	0018      	movs	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_InitTick+0x5c>)
 80007d2:	681c      	ldr	r4, [r3, #0]
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <HAL_InitTick+0x60>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	0019      	movs	r1, r3
 80007da:	23fa      	movs	r3, #250	; 0xfa
 80007dc:	0098      	lsls	r0, r3, #2
 80007de:	f7ff fc9b 	bl	8000118 <__udivsi3>
 80007e2:	0003      	movs	r3, r0
 80007e4:	0019      	movs	r1, r3
 80007e6:	0020      	movs	r0, r4
 80007e8:	f7ff fc96 	bl	8000118 <__udivsi3>
 80007ec:	0003      	movs	r3, r0
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 fb27 	bl	8000e42 <HAL_SYSTICK_Config>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007f8:	2301      	movs	r3, #1
 80007fa:	e00f      	b.n	800081c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b03      	cmp	r3, #3
 8000800:	d80b      	bhi.n	800081a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	2301      	movs	r3, #1
 8000806:	425b      	negs	r3, r3
 8000808:	2200      	movs	r2, #0
 800080a:	0018      	movs	r0, r3
 800080c:	f000 fb04 	bl	8000e18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_InitTick+0x64>)
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000816:	2300      	movs	r3, #0
 8000818:	e000      	b.n	800081c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
}
 800081c:	0018      	movs	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	b003      	add	sp, #12
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	20000008 	.word	0x20000008
 800082c:	20000004 	.word	0x20000004

08000830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_IncTick+0x1c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	001a      	movs	r2, r3
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_IncTick+0x20>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	18d2      	adds	r2, r2, r3
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <HAL_IncTick+0x20>)
 8000842:	601a      	str	r2, [r3, #0]
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	20000008 	.word	0x20000008
 8000850:	200000f4 	.word	0x200000f4

08000854 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;
 8000858:	4b02      	ldr	r3, [pc, #8]	; (8000864 <HAL_GetTick+0x10>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	0018      	movs	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	200000f4 	.word	0x200000f4

08000868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000870:	f7ff fff0 	bl	8000854 <HAL_GetTick>
 8000874:	0003      	movs	r3, r0
 8000876:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	3301      	adds	r3, #1
 8000880:	d005      	beq.n	800088e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_Delay+0x40>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	001a      	movs	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	189b      	adds	r3, r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	f7ff ffe0 	bl	8000854 <HAL_GetTick>
 8000894:	0002      	movs	r2, r0
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	429a      	cmp	r2, r3
 800089e:	d8f7      	bhi.n	8000890 <HAL_Delay+0x28>
  {
  }
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b004      	add	sp, #16
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000008 	.word	0x20000008

080008ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d101      	bne.n	80008be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e0f0      	b.n	8000aa0 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2220      	movs	r2, #32
 80008c2:	5c9b      	ldrb	r3, [r3, r2]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d103      	bne.n	80008d2 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	0018      	movs	r0, r3
 80008ce:	f7ff fce7 	bl	80002a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2102      	movs	r1, #2
 80008de:	438a      	bics	r2, r1
 80008e0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008e2:	f7ff ffb7 	bl	8000854 <HAL_GetTick>
 80008e6:	0003      	movs	r3, r0
 80008e8:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008ea:	e013      	b.n	8000914 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008ec:	f7ff ffb2 	bl	8000854 <HAL_GetTick>
 80008f0:	0002      	movs	r2, r0
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	2b0a      	cmp	r3, #10
 80008f8:	d90c      	bls.n	8000914 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	0292      	lsls	r2, r2, #10
 8000902:	431a      	orrs	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2220      	movs	r2, #32
 800090c:	2105      	movs	r1, #5
 800090e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	e0c5      	b.n	8000aa0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	2202      	movs	r2, #2
 800091c:	4013      	ands	r3, r2
 800091e:	d1e5      	bne.n	80008ec <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2101      	movs	r1, #1
 800092c:	430a      	orrs	r2, r1
 800092e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000930:	f7ff ff90 	bl	8000854 <HAL_GetTick>
 8000934:	0003      	movs	r3, r0
 8000936:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000938:	e013      	b.n	8000962 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800093a:	f7ff ff8b 	bl	8000854 <HAL_GetTick>
 800093e:	0002      	movs	r2, r0
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	2b0a      	cmp	r3, #10
 8000946:	d90c      	bls.n	8000962 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	0292      	lsls	r2, r2, #10
 8000950:	431a      	orrs	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2220      	movs	r2, #32
 800095a:	2105      	movs	r1, #5
 800095c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e09e      	b.n	8000aa0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	2201      	movs	r2, #1
 800096a:	4013      	ands	r3, r2
 800096c:	d0e5      	beq.n	800093a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	7e1b      	ldrb	r3, [r3, #24]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d108      	bne.n	8000988 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	430a      	orrs	r2, r1
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	e007      	b.n	8000998 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2180      	movs	r1, #128	; 0x80
 8000994:	438a      	bics	r2, r1
 8000996:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7e5b      	ldrb	r3, [r3, #25]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d108      	bne.n	80009b2 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2140      	movs	r1, #64	; 0x40
 80009ac:	430a      	orrs	r2, r1
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	e007      	b.n	80009c2 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2140      	movs	r1, #64	; 0x40
 80009be:	438a      	bics	r2, r1
 80009c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	7e9b      	ldrb	r3, [r3, #26]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d108      	bne.n	80009dc <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2120      	movs	r1, #32
 80009d6:	430a      	orrs	r2, r1
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	e007      	b.n	80009ec <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2120      	movs	r1, #32
 80009e8:	438a      	bics	r2, r1
 80009ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	7edb      	ldrb	r3, [r3, #27]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d108      	bne.n	8000a06 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2110      	movs	r1, #16
 8000a00:	438a      	bics	r2, r1
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	e007      	b.n	8000a16 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2110      	movs	r1, #16
 8000a12:	430a      	orrs	r2, r1
 8000a14:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	7f1b      	ldrb	r3, [r3, #28]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d108      	bne.n	8000a30 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2108      	movs	r1, #8
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	e007      	b.n	8000a40 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2108      	movs	r1, #8
 8000a3c:	438a      	bics	r2, r1
 8000a3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7f5b      	ldrb	r3, [r3, #29]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d108      	bne.n	8000a5a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2104      	movs	r1, #4
 8000a54:	430a      	orrs	r2, r1
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	e007      	b.n	8000a6a <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2104      	movs	r1, #4
 8000a66:	438a      	bics	r2, r1
 8000a68:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	689a      	ldr	r2, [r3, #8]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	431a      	orrs	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	431a      	orrs	r2, r3
 8000a80:	0011      	movs	r1, r2
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	1e5a      	subs	r2, r3, #1
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2220      	movs	r2, #32
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b004      	add	sp, #16
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	5c9b      	ldrb	r3, [r3, r2]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d12f      	bne.n	8000b1c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2220      	movs	r2, #32
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2101      	movs	r1, #1
 8000ad0:	438a      	bics	r2, r1
 8000ad2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ad4:	f7ff febe 	bl	8000854 <HAL_GetTick>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000adc:	e013      	b.n	8000b06 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ade:	f7ff feb9 	bl	8000854 <HAL_GetTick>
 8000ae2:	0002      	movs	r2, r0
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	2b0a      	cmp	r3, #10
 8000aea:	d90c      	bls.n	8000b06 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af0:	2280      	movs	r2, #128	; 0x80
 8000af2:	0292      	lsls	r2, r2, #10
 8000af4:	431a      	orrs	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2220      	movs	r2, #32
 8000afe:	2105      	movs	r1, #5
 8000b00:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e012      	b.n	8000b2c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4013      	ands	r3, r2
 8000b10:	d1e5      	bne.n	8000ade <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e007      	b.n	8000b2c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b20:	2280      	movs	r2, #128	; 0x80
 8000b22:	0312      	lsls	r2, r2, #12
 8000b24:	431a      	orrs	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
  }
}
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b004      	add	sp, #16
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
 8000b40:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b42:	201f      	movs	r0, #31
 8000b44:	183b      	adds	r3, r7, r0
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	2120      	movs	r1, #32
 8000b4a:	5c52      	ldrb	r2, [r2, r1]
 8000b4c:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b56:	183b      	adds	r3, r7, r0
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d005      	beq.n	8000b6a <HAL_CAN_AddTxMessage+0x36>
 8000b5e:	231f      	movs	r3, #31
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d000      	beq.n	8000b6a <HAL_CAN_AddTxMessage+0x36>
 8000b68:	e0b7      	b.n	8000cda <HAL_CAN_AddTxMessage+0x1a6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	04db      	lsls	r3, r3, #19
 8000b70:	4013      	ands	r3, r2
 8000b72:	d10a      	bne.n	8000b8a <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	051b      	lsls	r3, r3, #20
 8000b7a:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b7c:	d105      	bne.n	8000b8a <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	055b      	lsls	r3, r3, #21
 8000b84:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b86:	d100      	bne.n	8000b8a <HAL_CAN_AddTxMessage+0x56>
 8000b88:	e09e      	b.n	8000cc8 <HAL_CAN_AddTxMessage+0x194>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	0e1b      	lsrs	r3, r3, #24
 8000b8e:	2203      	movs	r2, #3
 8000b90:	4013      	ands	r3, r2
 8000b92:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d908      	bls.n	8000bac <HAL_CAN_AddTxMessage+0x78>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	0412      	lsls	r2, r2, #16
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e09e      	b.n	8000cea <HAL_CAN_AddTxMessage+0x1b6>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000bac:	2201      	movs	r2, #1
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	409a      	lsls	r2, r3
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d10c      	bne.n	8000bd8 <HAL_CAN_AddTxMessage+0xa4>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4311      	orrs	r1, r2
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	3218      	adds	r2, #24
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	50d1      	str	r1, [r2, r3]
 8000bd6:	e00f      	b.n	8000bf8 <HAL_CAN_AddTxMessage+0xc4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000be2:	431a      	orrs	r2, r3
 8000be4:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8000bee:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	3218      	adds	r2, #24
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	6819      	ldr	r1, [r3, #0]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	691a      	ldr	r2, [r3, #16]
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	3318      	adds	r3, #24
 8000c04:	011b      	lsls	r3, r3, #4
 8000c06:	18cb      	adds	r3, r1, r3
 8000c08:	3304      	adds	r3, #4
 8000c0a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	7d1b      	ldrb	r3, [r3, #20]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d112      	bne.n	8000c3a <HAL_CAN_AddTxMessage+0x106>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	3318      	adds	r3, #24
 8000c1c:	011b      	lsls	r3, r3, #4
 8000c1e:	18d3      	adds	r3, r2, r3
 8000c20:	3304      	adds	r3, #4
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6819      	ldr	r1, [r3, #0]
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	431a      	orrs	r2, r3
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3318      	adds	r3, #24
 8000c32:	011b      	lsls	r3, r3, #4
 8000c34:	18cb      	adds	r3, r1, r3
 8000c36:	3304      	adds	r3, #4
 8000c38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3307      	adds	r3, #7
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	061a      	lsls	r2, r3, #24
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3306      	adds	r3, #6
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	041b      	lsls	r3, r3, #16
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3305      	adds	r3, #5
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	021b      	lsls	r3, r3, #8
 8000c54:	431a      	orrs	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	6818      	ldr	r0, [r3, #0]
 8000c62:	430a      	orrs	r2, r1
 8000c64:	6979      	ldr	r1, [r7, #20]
 8000c66:	23c6      	movs	r3, #198	; 0xc6
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	0109      	lsls	r1, r1, #4
 8000c6c:	1841      	adds	r1, r0, r1
 8000c6e:	18cb      	adds	r3, r1, r3
 8000c70:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3303      	adds	r3, #3
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	061a      	lsls	r2, r3, #24
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	041b      	lsls	r3, r3, #16
 8000c82:	431a      	orrs	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3301      	adds	r3, #1
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	021b      	lsls	r3, r3, #8
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	0019      	movs	r1, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	6979      	ldr	r1, [r7, #20]
 8000c9c:	23c4      	movs	r3, #196	; 0xc4
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	0109      	lsls	r1, r1, #4
 8000ca2:	1841      	adds	r1, r0, r1
 8000ca4:	18cb      	adds	r3, r1, r3
 8000ca6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	3218      	adds	r2, #24
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	58d2      	ldr	r2, [r2, r3]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2101      	movs	r1, #1
 8000cba:	4311      	orrs	r1, r2
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	3218      	adds	r2, #24
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e010      	b.n	8000cea <HAL_CAN_AddTxMessage+0x1b6>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ccc:	2280      	movs	r2, #128	; 0x80
 8000cce:	0392      	lsls	r2, r2, #14
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e007      	b.n	8000cea <HAL_CAN_AddTxMessage+0x1b6>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	02d2      	lsls	r2, r2, #11
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
  }
}
 8000cea:	0018      	movs	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b008      	add	sp, #32
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	0002      	movs	r2, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b7f      	cmp	r3, #127	; 0x7f
 8000d08:	d828      	bhi.n	8000d5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d0a:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <__NVIC_SetPriority+0xd4>)
 8000d0c:	1dfb      	adds	r3, r7, #7
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	33c0      	adds	r3, #192	; 0xc0
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	589b      	ldr	r3, [r3, r2]
 8000d1a:	1dfa      	adds	r2, r7, #7
 8000d1c:	7812      	ldrb	r2, [r2, #0]
 8000d1e:	0011      	movs	r1, r2
 8000d20:	2203      	movs	r2, #3
 8000d22:	400a      	ands	r2, r1
 8000d24:	00d2      	lsls	r2, r2, #3
 8000d26:	21ff      	movs	r1, #255	; 0xff
 8000d28:	4091      	lsls	r1, r2
 8000d2a:	000a      	movs	r2, r1
 8000d2c:	43d2      	mvns	r2, r2
 8000d2e:	401a      	ands	r2, r3
 8000d30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	019b      	lsls	r3, r3, #6
 8000d36:	22ff      	movs	r2, #255	; 0xff
 8000d38:	401a      	ands	r2, r3
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	0018      	movs	r0, r3
 8000d40:	2303      	movs	r3, #3
 8000d42:	4003      	ands	r3, r0
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d48:	481f      	ldr	r0, [pc, #124]	; (8000dc8 <__NVIC_SetPriority+0xd4>)
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	b25b      	sxtb	r3, r3
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	430a      	orrs	r2, r1
 8000d54:	33c0      	adds	r3, #192	; 0xc0
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d5a:	e031      	b.n	8000dc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d5c:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <__NVIC_SetPriority+0xd8>)
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	0019      	movs	r1, r3
 8000d64:	230f      	movs	r3, #15
 8000d66:	400b      	ands	r3, r1
 8000d68:	3b08      	subs	r3, #8
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	3306      	adds	r3, #6
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	18d3      	adds	r3, r2, r3
 8000d72:	3304      	adds	r3, #4
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	1dfa      	adds	r2, r7, #7
 8000d78:	7812      	ldrb	r2, [r2, #0]
 8000d7a:	0011      	movs	r1, r2
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	400a      	ands	r2, r1
 8000d80:	00d2      	lsls	r2, r2, #3
 8000d82:	21ff      	movs	r1, #255	; 0xff
 8000d84:	4091      	lsls	r1, r2
 8000d86:	000a      	movs	r2, r1
 8000d88:	43d2      	mvns	r2, r2
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	019b      	lsls	r3, r3, #6
 8000d92:	22ff      	movs	r2, #255	; 0xff
 8000d94:	401a      	ands	r2, r3
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	4003      	ands	r3, r0
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da4:	4809      	ldr	r0, [pc, #36]	; (8000dcc <__NVIC_SetPriority+0xd8>)
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	001c      	movs	r4, r3
 8000dac:	230f      	movs	r3, #15
 8000dae:	4023      	ands	r3, r4
 8000db0:	3b08      	subs	r3, #8
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	430a      	orrs	r2, r1
 8000db6:	3306      	adds	r3, #6
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	18c3      	adds	r3, r0, r3
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b003      	add	sp, #12
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	4a0c      	ldr	r2, [pc, #48]	; (8000e10 <SysTick_Config+0x40>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d901      	bls.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e010      	b.n	8000e08 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <SysTick_Config+0x44>)
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	3a01      	subs	r2, #1
 8000dec:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	2301      	movs	r3, #1
 8000df0:	425b      	negs	r3, r3
 8000df2:	2103      	movs	r1, #3
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff ff7d 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <SysTick_Config+0x44>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <SysTick_Config+0x44>)
 8000e02:	2207      	movs	r2, #7
 8000e04:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	0018      	movs	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b002      	add	sp, #8
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	00ffffff 	.word	0x00ffffff
 8000e14:	e000e010 	.word	0xe000e010

08000e18 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	210f      	movs	r1, #15
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	1c02      	adds	r2, r0, #0
 8000e28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	0011      	movs	r1, r2
 8000e34:	0018      	movs	r0, r3
 8000e36:	f7ff ff5d 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b004      	add	sp, #16
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff ffbf 	bl	8000dd0 <SysTick_Config>
 8000e52:	0003      	movs	r3, r0
}
 8000e54:	0018      	movs	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b002      	add	sp, #8
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6a:	e149      	b.n	8001100 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2101      	movs	r1, #1
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4091      	lsls	r1, r2
 8000e76:	000a      	movs	r2, r1
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d100      	bne.n	8000e84 <HAL_GPIO_Init+0x28>
 8000e82:	e13a      	b.n	80010fa <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d00b      	beq.n	8000ea4 <HAL_GPIO_Init+0x48>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d007      	beq.n	8000ea4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e98:	2b11      	cmp	r3, #17
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b12      	cmp	r3, #18
 8000ea2:	d130      	bne.n	8000f06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	409a      	lsls	r2, r3
 8000eb2:	0013      	movs	r3, r2
 8000eb4:	43da      	mvns	r2, r3
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	409a      	lsls	r2, r3
 8000ec6:	0013      	movs	r3, r2
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eda:	2201      	movs	r2, #1
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	0013      	movs	r3, r2
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	091b      	lsrs	r3, r3, #4
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	0013      	movs	r3, r2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	409a      	lsls	r2, r3
 8000f14:	0013      	movs	r3, r2
 8000f16:	43da      	mvns	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	409a      	lsls	r2, r3
 8000f28:	0013      	movs	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0xea>
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b12      	cmp	r3, #18
 8000f44:	d123      	bne.n	8000f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	08da      	lsrs	r2, r3, #3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3208      	adds	r2, #8
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	58d3      	ldr	r3, [r2, r3]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	2207      	movs	r2, #7
 8000f58:	4013      	ands	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	0013      	movs	r3, r2
 8000f62:	43da      	mvns	r2, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	691a      	ldr	r2, [r3, #16]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2107      	movs	r1, #7
 8000f72:	400b      	ands	r3, r1
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	08da      	lsrs	r2, r3, #3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3208      	adds	r2, #8
 8000f88:	0092      	lsls	r2, r2, #2
 8000f8a:	6939      	ldr	r1, [r7, #16]
 8000f8c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2203      	movs	r2, #3
 8000fac:	401a      	ands	r2, r3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	0013      	movs	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	055b      	lsls	r3, r3, #21
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d100      	bne.n	8000fd0 <HAL_GPIO_Init+0x174>
 8000fce:	e094      	b.n	80010fa <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd0:	4b51      	ldr	r3, [pc, #324]	; (8001118 <HAL_GPIO_Init+0x2bc>)
 8000fd2:	699a      	ldr	r2, [r3, #24]
 8000fd4:	4b50      	ldr	r3, [pc, #320]	; (8001118 <HAL_GPIO_Init+0x2bc>)
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	619a      	str	r2, [r3, #24]
 8000fdc:	4b4e      	ldr	r3, [pc, #312]	; (8001118 <HAL_GPIO_Init+0x2bc>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fe8:	4a4c      	ldr	r2, [pc, #304]	; (800111c <HAL_GPIO_Init+0x2c0>)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	3302      	adds	r3, #2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	589b      	ldr	r3, [r3, r2]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	220f      	movs	r2, #15
 8001000:	409a      	lsls	r2, r3
 8001002:	0013      	movs	r3, r2
 8001004:	43da      	mvns	r2, r3
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	2390      	movs	r3, #144	; 0x90
 8001010:	05db      	lsls	r3, r3, #23
 8001012:	429a      	cmp	r2, r3
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x1d6>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a41      	ldr	r2, [pc, #260]	; (8001120 <HAL_GPIO_Init+0x2c4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x1d2>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a40      	ldr	r2, [pc, #256]	; (8001124 <HAL_GPIO_Init+0x2c8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x1ce>
 8001026:	2302      	movs	r3, #2
 8001028:	e004      	b.n	8001034 <HAL_GPIO_Init+0x1d8>
 800102a:	2305      	movs	r3, #5
 800102c:	e002      	b.n	8001034 <HAL_GPIO_Init+0x1d8>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <HAL_GPIO_Init+0x1d8>
 8001032:	2300      	movs	r3, #0
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	2103      	movs	r1, #3
 8001038:	400a      	ands	r2, r1
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	4093      	lsls	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001044:	4935      	ldr	r1, [pc, #212]	; (800111c <HAL_GPIO_Init+0x2c0>)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001052:	4b35      	ldr	r3, [pc, #212]	; (8001128 <HAL_GPIO_Init+0x2cc>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	43da      	mvns	r2, r3
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	025b      	lsls	r3, r3, #9
 800106a:	4013      	ands	r3, r2
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001076:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <HAL_GPIO_Init+0x2cc>)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800107c:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <HAL_GPIO_Init+0x2cc>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43da      	mvns	r2, r3
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	029b      	lsls	r3, r3, #10
 8001094:	4013      	ands	r3, r2
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <HAL_GPIO_Init+0x2cc>)
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <HAL_GPIO_Init+0x2cc>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43da      	mvns	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	035b      	lsls	r3, r3, #13
 80010be:	4013      	ands	r3, r2
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_GPIO_Init+0x2cc>)
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_GPIO_Init+0x2cc>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43da      	mvns	r2, r3
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	039b      	lsls	r3, r3, #14
 80010e8:	4013      	ands	r3, r2
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_GPIO_Init+0x2cc>)
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	40da      	lsrs	r2, r3
 8001108:	1e13      	subs	r3, r2, #0
 800110a:	d000      	beq.n	800110e <HAL_GPIO_Init+0x2b2>
 800110c:	e6ae      	b.n	8000e6c <HAL_GPIO_Init+0x10>
  } 
}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	b006      	add	sp, #24
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	40021000 	.word	0x40021000
 800111c:	40010000 	.word	0x40010000
 8001120:	48000400 	.word	0x48000400
 8001124:	48000800 	.word	0x48000800
 8001128:	40010400 	.word	0x40010400

0800112c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	0008      	movs	r0, r1
 8001136:	0011      	movs	r1, r2
 8001138:	1cbb      	adds	r3, r7, #2
 800113a:	1c02      	adds	r2, r0, #0
 800113c:	801a      	strh	r2, [r3, #0]
 800113e:	1c7b      	adds	r3, r7, #1
 8001140:	1c0a      	adds	r2, r1, #0
 8001142:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001144:	1c7b      	adds	r3, r7, #1
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d004      	beq.n	8001156 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800114c:	1cbb      	adds	r3, r7, #2
 800114e:	881a      	ldrh	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001154:	e003      	b.n	800115e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001156:	1cbb      	adds	r3, r7, #2
 8001158:	881a      	ldrh	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	b002      	add	sp, #8
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d102      	bne.n	800117c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	f000 fb76 	bl	8001868 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2201      	movs	r2, #1
 8001182:	4013      	ands	r3, r2
 8001184:	d100      	bne.n	8001188 <HAL_RCC_OscConfig+0x20>
 8001186:	e08e      	b.n	80012a6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001188:	4bc5      	ldr	r3, [pc, #788]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	220c      	movs	r2, #12
 800118e:	4013      	ands	r3, r2
 8001190:	2b04      	cmp	r3, #4
 8001192:	d00e      	beq.n	80011b2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001194:	4bc2      	ldr	r3, [pc, #776]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	220c      	movs	r2, #12
 800119a:	4013      	ands	r3, r2
 800119c:	2b08      	cmp	r3, #8
 800119e:	d117      	bne.n	80011d0 <HAL_RCC_OscConfig+0x68>
 80011a0:	4bbf      	ldr	r3, [pc, #764]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	23c0      	movs	r3, #192	; 0xc0
 80011a6:	025b      	lsls	r3, r3, #9
 80011a8:	401a      	ands	r2, r3
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	025b      	lsls	r3, r3, #9
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d10e      	bne.n	80011d0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b2:	4bbb      	ldr	r3, [pc, #748]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	029b      	lsls	r3, r3, #10
 80011ba:	4013      	ands	r3, r2
 80011bc:	d100      	bne.n	80011c0 <HAL_RCC_OscConfig+0x58>
 80011be:	e071      	b.n	80012a4 <HAL_RCC_OscConfig+0x13c>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d000      	beq.n	80011ca <HAL_RCC_OscConfig+0x62>
 80011c8:	e06c      	b.n	80012a4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f000 fb4c 	bl	8001868 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d107      	bne.n	80011e8 <HAL_RCC_OscConfig+0x80>
 80011d8:	4bb1      	ldr	r3, [pc, #708]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4bb0      	ldr	r3, [pc, #704]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 80011de:	2180      	movs	r1, #128	; 0x80
 80011e0:	0249      	lsls	r1, r1, #9
 80011e2:	430a      	orrs	r2, r1
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	e02f      	b.n	8001248 <HAL_RCC_OscConfig+0xe0>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10c      	bne.n	800120a <HAL_RCC_OscConfig+0xa2>
 80011f0:	4bab      	ldr	r3, [pc, #684]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4baa      	ldr	r3, [pc, #680]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 80011f6:	49ab      	ldr	r1, [pc, #684]	; (80014a4 <HAL_RCC_OscConfig+0x33c>)
 80011f8:	400a      	ands	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	4ba8      	ldr	r3, [pc, #672]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4ba7      	ldr	r3, [pc, #668]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001202:	49a9      	ldr	r1, [pc, #676]	; (80014a8 <HAL_RCC_OscConfig+0x340>)
 8001204:	400a      	ands	r2, r1
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e01e      	b.n	8001248 <HAL_RCC_OscConfig+0xe0>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b05      	cmp	r3, #5
 8001210:	d10e      	bne.n	8001230 <HAL_RCC_OscConfig+0xc8>
 8001212:	4ba3      	ldr	r3, [pc, #652]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4ba2      	ldr	r3, [pc, #648]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001218:	2180      	movs	r1, #128	; 0x80
 800121a:	02c9      	lsls	r1, r1, #11
 800121c:	430a      	orrs	r2, r1
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	4b9f      	ldr	r3, [pc, #636]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b9e      	ldr	r3, [pc, #632]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001226:	2180      	movs	r1, #128	; 0x80
 8001228:	0249      	lsls	r1, r1, #9
 800122a:	430a      	orrs	r2, r1
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e00b      	b.n	8001248 <HAL_RCC_OscConfig+0xe0>
 8001230:	4b9b      	ldr	r3, [pc, #620]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b9a      	ldr	r3, [pc, #616]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001236:	499b      	ldr	r1, [pc, #620]	; (80014a4 <HAL_RCC_OscConfig+0x33c>)
 8001238:	400a      	ands	r2, r1
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	4b98      	ldr	r3, [pc, #608]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b97      	ldr	r3, [pc, #604]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001242:	4999      	ldr	r1, [pc, #612]	; (80014a8 <HAL_RCC_OscConfig+0x340>)
 8001244:	400a      	ands	r2, r1
 8001246:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d014      	beq.n	800127a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fb00 	bl	8000854 <HAL_GetTick>
 8001254:	0003      	movs	r3, r0
 8001256:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125a:	f7ff fafb 	bl	8000854 <HAL_GetTick>
 800125e:	0002      	movs	r2, r0
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b64      	cmp	r3, #100	; 0x64
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e2fd      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126c:	4b8c      	ldr	r3, [pc, #560]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	029b      	lsls	r3, r3, #10
 8001274:	4013      	ands	r3, r2
 8001276:	d0f0      	beq.n	800125a <HAL_RCC_OscConfig+0xf2>
 8001278:	e015      	b.n	80012a6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127a:	f7ff faeb 	bl	8000854 <HAL_GetTick>
 800127e:	0003      	movs	r3, r0
 8001280:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fae6 	bl	8000854 <HAL_GetTick>
 8001288:	0002      	movs	r2, r0
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	; 0x64
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e2e8      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001296:	4b82      	ldr	r3, [pc, #520]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	029b      	lsls	r3, r3, #10
 800129e:	4013      	ands	r3, r2
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x11c>
 80012a2:	e000      	b.n	80012a6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2202      	movs	r2, #2
 80012ac:	4013      	ands	r3, r2
 80012ae:	d100      	bne.n	80012b2 <HAL_RCC_OscConfig+0x14a>
 80012b0:	e06c      	b.n	800138c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012b2:	4b7b      	ldr	r3, [pc, #492]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	220c      	movs	r2, #12
 80012b8:	4013      	ands	r3, r2
 80012ba:	d00e      	beq.n	80012da <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012bc:	4b78      	ldr	r3, [pc, #480]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	220c      	movs	r2, #12
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d11f      	bne.n	8001308 <HAL_RCC_OscConfig+0x1a0>
 80012c8:	4b75      	ldr	r3, [pc, #468]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	23c0      	movs	r3, #192	; 0xc0
 80012ce:	025b      	lsls	r3, r3, #9
 80012d0:	401a      	ands	r2, r3
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d116      	bne.n	8001308 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012da:	4b71      	ldr	r3, [pc, #452]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2202      	movs	r2, #2
 80012e0:	4013      	ands	r3, r2
 80012e2:	d005      	beq.n	80012f0 <HAL_RCC_OscConfig+0x188>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d001      	beq.n	80012f0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e2bb      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f0:	4b6b      	ldr	r3, [pc, #428]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	22f8      	movs	r2, #248	; 0xf8
 80012f6:	4393      	bics	r3, r2
 80012f8:	0019      	movs	r1, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	00da      	lsls	r2, r3, #3
 8001300:	4b67      	ldr	r3, [pc, #412]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001302:	430a      	orrs	r2, r1
 8001304:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001306:	e041      	b.n	800138c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d024      	beq.n	800135a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001310:	4b63      	ldr	r3, [pc, #396]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b62      	ldr	r3, [pc, #392]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001316:	2101      	movs	r1, #1
 8001318:	430a      	orrs	r2, r1
 800131a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fa9a 	bl	8000854 <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001326:	f7ff fa95 	bl	8000854 <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e297      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001338:	4b59      	ldr	r3, [pc, #356]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2202      	movs	r2, #2
 800133e:	4013      	ands	r3, r2
 8001340:	d0f1      	beq.n	8001326 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001342:	4b57      	ldr	r3, [pc, #348]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	22f8      	movs	r2, #248	; 0xf8
 8001348:	4393      	bics	r3, r2
 800134a:	0019      	movs	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	00da      	lsls	r2, r3, #3
 8001352:	4b53      	ldr	r3, [pc, #332]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001354:	430a      	orrs	r2, r1
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e018      	b.n	800138c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800135a:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b50      	ldr	r3, [pc, #320]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001360:	2101      	movs	r1, #1
 8001362:	438a      	bics	r2, r1
 8001364:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001366:	f7ff fa75 	bl	8000854 <HAL_GetTick>
 800136a:	0003      	movs	r3, r0
 800136c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001370:	f7ff fa70 	bl	8000854 <HAL_GetTick>
 8001374:	0002      	movs	r2, r0
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e272      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001382:	4b47      	ldr	r3, [pc, #284]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2202      	movs	r2, #2
 8001388:	4013      	ands	r3, r2
 800138a:	d1f1      	bne.n	8001370 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2208      	movs	r2, #8
 8001392:	4013      	ands	r3, r2
 8001394:	d036      	beq.n	8001404 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d019      	beq.n	80013d2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800139e:	4b40      	ldr	r3, [pc, #256]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 80013a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 80013a4:	2101      	movs	r1, #1
 80013a6:	430a      	orrs	r2, r1
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fa53 	bl	8000854 <HAL_GetTick>
 80013ae:	0003      	movs	r3, r0
 80013b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b4:	f7ff fa4e 	bl	8000854 <HAL_GetTick>
 80013b8:	0002      	movs	r2, r0
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e250      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c6:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	2202      	movs	r2, #2
 80013cc:	4013      	ands	r3, r2
 80013ce:	d0f1      	beq.n	80013b4 <HAL_RCC_OscConfig+0x24c>
 80013d0:	e018      	b.n	8001404 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d2:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 80013d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d6:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 80013d8:	2101      	movs	r1, #1
 80013da:	438a      	bics	r2, r1
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7ff fa39 	bl	8000854 <HAL_GetTick>
 80013e2:	0003      	movs	r3, r0
 80013e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e8:	f7ff fa34 	bl	8000854 <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e236      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fa:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	2202      	movs	r2, #2
 8001400:	4013      	ands	r3, r2
 8001402:	d1f1      	bne.n	80013e8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2204      	movs	r2, #4
 800140a:	4013      	ands	r3, r2
 800140c:	d100      	bne.n	8001410 <HAL_RCC_OscConfig+0x2a8>
 800140e:	e0b5      	b.n	800157c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001410:	231f      	movs	r3, #31
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 800141a:	69da      	ldr	r2, [r3, #28]
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	055b      	lsls	r3, r3, #21
 8001420:	4013      	ands	r3, r2
 8001422:	d111      	bne.n	8001448 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001426:	69da      	ldr	r2, [r3, #28]
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 800142a:	2180      	movs	r1, #128	; 0x80
 800142c:	0549      	lsls	r1, r1, #21
 800142e:	430a      	orrs	r2, r1
 8001430:	61da      	str	r2, [r3, #28]
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001434:	69da      	ldr	r2, [r3, #28]
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	055b      	lsls	r3, r3, #21
 800143a:	4013      	ands	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001440:	231f      	movs	r3, #31
 8001442:	18fb      	adds	r3, r7, r3
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <HAL_RCC_OscConfig+0x344>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4013      	ands	r3, r2
 8001452:	d11a      	bne.n	800148a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_RCC_OscConfig+0x344>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <HAL_RCC_OscConfig+0x344>)
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	0049      	lsls	r1, r1, #1
 800145e:	430a      	orrs	r2, r1
 8001460:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001462:	f7ff f9f7 	bl	8000854 <HAL_GetTick>
 8001466:	0003      	movs	r3, r0
 8001468:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146c:	f7ff f9f2 	bl	8000854 <HAL_GetTick>
 8001470:	0002      	movs	r2, r0
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	; 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e1f4      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <HAL_RCC_OscConfig+0x344>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4013      	ands	r3, r2
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d10e      	bne.n	80014b0 <HAL_RCC_OscConfig+0x348>
 8001492:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001494:	6a1a      	ldr	r2, [r3, #32]
 8001496:	4b02      	ldr	r3, [pc, #8]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001498:	2101      	movs	r1, #1
 800149a:	430a      	orrs	r2, r1
 800149c:	621a      	str	r2, [r3, #32]
 800149e:	e035      	b.n	800150c <HAL_RCC_OscConfig+0x3a4>
 80014a0:	40021000 	.word	0x40021000
 80014a4:	fffeffff 	.word	0xfffeffff
 80014a8:	fffbffff 	.word	0xfffbffff
 80014ac:	40007000 	.word	0x40007000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10c      	bne.n	80014d2 <HAL_RCC_OscConfig+0x36a>
 80014b8:	4bca      	ldr	r3, [pc, #808]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80014ba:	6a1a      	ldr	r2, [r3, #32]
 80014bc:	4bc9      	ldr	r3, [pc, #804]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80014be:	2101      	movs	r1, #1
 80014c0:	438a      	bics	r2, r1
 80014c2:	621a      	str	r2, [r3, #32]
 80014c4:	4bc7      	ldr	r3, [pc, #796]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80014c6:	6a1a      	ldr	r2, [r3, #32]
 80014c8:	4bc6      	ldr	r3, [pc, #792]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80014ca:	2104      	movs	r1, #4
 80014cc:	438a      	bics	r2, r1
 80014ce:	621a      	str	r2, [r3, #32]
 80014d0:	e01c      	b.n	800150c <HAL_RCC_OscConfig+0x3a4>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b05      	cmp	r3, #5
 80014d8:	d10c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x38c>
 80014da:	4bc2      	ldr	r3, [pc, #776]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80014dc:	6a1a      	ldr	r2, [r3, #32]
 80014de:	4bc1      	ldr	r3, [pc, #772]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80014e0:	2104      	movs	r1, #4
 80014e2:	430a      	orrs	r2, r1
 80014e4:	621a      	str	r2, [r3, #32]
 80014e6:	4bbf      	ldr	r3, [pc, #764]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80014e8:	6a1a      	ldr	r2, [r3, #32]
 80014ea:	4bbe      	ldr	r3, [pc, #760]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80014ec:	2101      	movs	r1, #1
 80014ee:	430a      	orrs	r2, r1
 80014f0:	621a      	str	r2, [r3, #32]
 80014f2:	e00b      	b.n	800150c <HAL_RCC_OscConfig+0x3a4>
 80014f4:	4bbb      	ldr	r3, [pc, #748]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80014f6:	6a1a      	ldr	r2, [r3, #32]
 80014f8:	4bba      	ldr	r3, [pc, #744]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80014fa:	2101      	movs	r1, #1
 80014fc:	438a      	bics	r2, r1
 80014fe:	621a      	str	r2, [r3, #32]
 8001500:	4bb8      	ldr	r3, [pc, #736]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001502:	6a1a      	ldr	r2, [r3, #32]
 8001504:	4bb7      	ldr	r3, [pc, #732]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001506:	2104      	movs	r1, #4
 8001508:	438a      	bics	r2, r1
 800150a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d014      	beq.n	800153e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001514:	f7ff f99e 	bl	8000854 <HAL_GetTick>
 8001518:	0003      	movs	r3, r0
 800151a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151c:	e009      	b.n	8001532 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800151e:	f7ff f999 	bl	8000854 <HAL_GetTick>
 8001522:	0002      	movs	r2, r0
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	4aaf      	ldr	r2, [pc, #700]	; (80017e8 <HAL_RCC_OscConfig+0x680>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e19a      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001532:	4bac      	ldr	r3, [pc, #688]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	2202      	movs	r2, #2
 8001538:	4013      	ands	r3, r2
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x3b6>
 800153c:	e013      	b.n	8001566 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153e:	f7ff f989 	bl	8000854 <HAL_GetTick>
 8001542:	0003      	movs	r3, r0
 8001544:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001546:	e009      	b.n	800155c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001548:	f7ff f984 	bl	8000854 <HAL_GetTick>
 800154c:	0002      	movs	r2, r0
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	4aa5      	ldr	r2, [pc, #660]	; (80017e8 <HAL_RCC_OscConfig+0x680>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e185      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155c:	4ba1      	ldr	r3, [pc, #644]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	2202      	movs	r2, #2
 8001562:	4013      	ands	r3, r2
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001566:	231f      	movs	r3, #31
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d105      	bne.n	800157c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001570:	4b9c      	ldr	r3, [pc, #624]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001572:	69da      	ldr	r2, [r3, #28]
 8001574:	4b9b      	ldr	r3, [pc, #620]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001576:	499d      	ldr	r1, [pc, #628]	; (80017ec <HAL_RCC_OscConfig+0x684>)
 8001578:	400a      	ands	r2, r1
 800157a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2210      	movs	r2, #16
 8001582:	4013      	ands	r3, r2
 8001584:	d063      	beq.n	800164e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d12a      	bne.n	80015e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800158e:	4b95      	ldr	r3, [pc, #596]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001592:	4b94      	ldr	r3, [pc, #592]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001594:	2104      	movs	r1, #4
 8001596:	430a      	orrs	r2, r1
 8001598:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800159a:	4b92      	ldr	r3, [pc, #584]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 800159c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800159e:	4b91      	ldr	r3, [pc, #580]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80015a0:	2101      	movs	r1, #1
 80015a2:	430a      	orrs	r2, r1
 80015a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a6:	f7ff f955 	bl	8000854 <HAL_GetTick>
 80015aa:	0003      	movs	r3, r0
 80015ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015b0:	f7ff f950 	bl	8000854 <HAL_GetTick>
 80015b4:	0002      	movs	r2, r0
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e152      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015c2:	4b88      	ldr	r3, [pc, #544]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80015c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c6:	2202      	movs	r2, #2
 80015c8:	4013      	ands	r3, r2
 80015ca:	d0f1      	beq.n	80015b0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015cc:	4b85      	ldr	r3, [pc, #532]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80015ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d0:	22f8      	movs	r2, #248	; 0xf8
 80015d2:	4393      	bics	r3, r2
 80015d4:	0019      	movs	r1, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	00da      	lsls	r2, r3, #3
 80015dc:	4b81      	ldr	r3, [pc, #516]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80015de:	430a      	orrs	r2, r1
 80015e0:	635a      	str	r2, [r3, #52]	; 0x34
 80015e2:	e034      	b.n	800164e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	3305      	adds	r3, #5
 80015ea:	d111      	bne.n	8001610 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015ec:	4b7d      	ldr	r3, [pc, #500]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80015ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015f0:	4b7c      	ldr	r3, [pc, #496]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80015f2:	2104      	movs	r1, #4
 80015f4:	438a      	bics	r2, r1
 80015f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015f8:	4b7a      	ldr	r3, [pc, #488]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80015fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fc:	22f8      	movs	r2, #248	; 0xf8
 80015fe:	4393      	bics	r3, r2
 8001600:	0019      	movs	r1, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	00da      	lsls	r2, r3, #3
 8001608:	4b76      	ldr	r3, [pc, #472]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 800160a:	430a      	orrs	r2, r1
 800160c:	635a      	str	r2, [r3, #52]	; 0x34
 800160e:	e01e      	b.n	800164e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001610:	4b74      	ldr	r3, [pc, #464]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001614:	4b73      	ldr	r3, [pc, #460]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001616:	2104      	movs	r1, #4
 8001618:	430a      	orrs	r2, r1
 800161a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800161c:	4b71      	ldr	r3, [pc, #452]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 800161e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001620:	4b70      	ldr	r3, [pc, #448]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001622:	2101      	movs	r1, #1
 8001624:	438a      	bics	r2, r1
 8001626:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001628:	f7ff f914 	bl	8000854 <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001632:	f7ff f90f 	bl	8000854 <HAL_GetTick>
 8001636:	0002      	movs	r2, r0
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e111      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001644:	4b67      	ldr	r3, [pc, #412]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001648:	2202      	movs	r2, #2
 800164a:	4013      	ands	r3, r2
 800164c:	d1f1      	bne.n	8001632 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2220      	movs	r2, #32
 8001654:	4013      	ands	r3, r2
 8001656:	d05c      	beq.n	8001712 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001658:	4b62      	ldr	r3, [pc, #392]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	220c      	movs	r2, #12
 800165e:	4013      	ands	r3, r2
 8001660:	2b0c      	cmp	r3, #12
 8001662:	d00e      	beq.n	8001682 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001664:	4b5f      	ldr	r3, [pc, #380]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	220c      	movs	r2, #12
 800166a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800166c:	2b08      	cmp	r3, #8
 800166e:	d114      	bne.n	800169a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001670:	4b5c      	ldr	r3, [pc, #368]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	23c0      	movs	r3, #192	; 0xc0
 8001676:	025b      	lsls	r3, r3, #9
 8001678:	401a      	ands	r2, r3
 800167a:	23c0      	movs	r3, #192	; 0xc0
 800167c:	025b      	lsls	r3, r3, #9
 800167e:	429a      	cmp	r2, r3
 8001680:	d10b      	bne.n	800169a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001682:	4b58      	ldr	r3, [pc, #352]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	025b      	lsls	r3, r3, #9
 800168a:	4013      	ands	r3, r2
 800168c:	d040      	beq.n	8001710 <HAL_RCC_OscConfig+0x5a8>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d03c      	beq.n	8001710 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e0e6      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d01b      	beq.n	80016da <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80016a2:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80016a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016a6:	4b4f      	ldr	r3, [pc, #316]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80016a8:	2180      	movs	r1, #128	; 0x80
 80016aa:	0249      	lsls	r1, r1, #9
 80016ac:	430a      	orrs	r2, r1
 80016ae:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff f8d0 	bl	8000854 <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ba:	f7ff f8cb 	bl	8000854 <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e0cd      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80016cc:	4b45      	ldr	r3, [pc, #276]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80016ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	025b      	lsls	r3, r3, #9
 80016d4:	4013      	ands	r3, r2
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x552>
 80016d8:	e01b      	b.n	8001712 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80016da:	4b42      	ldr	r3, [pc, #264]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80016dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016de:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80016e0:	4943      	ldr	r1, [pc, #268]	; (80017f0 <HAL_RCC_OscConfig+0x688>)
 80016e2:	400a      	ands	r2, r1
 80016e4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff f8b5 	bl	8000854 <HAL_GetTick>
 80016ea:	0003      	movs	r3, r0
 80016ec:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016f0:	f7ff f8b0 	bl	8000854 <HAL_GetTick>
 80016f4:	0002      	movs	r2, r0
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e0b2      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001702:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	025b      	lsls	r3, r3, #9
 800170a:	4013      	ands	r3, r2
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x588>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001710:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	2b00      	cmp	r3, #0
 8001718:	d100      	bne.n	800171c <HAL_RCC_OscConfig+0x5b4>
 800171a:	e0a4      	b.n	8001866 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800171c:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	220c      	movs	r2, #12
 8001722:	4013      	ands	r3, r2
 8001724:	2b08      	cmp	r3, #8
 8001726:	d100      	bne.n	800172a <HAL_RCC_OscConfig+0x5c2>
 8001728:	e078      	b.n	800181c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	2b02      	cmp	r3, #2
 8001730:	d14c      	bne.n	80017cc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001732:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001738:	492e      	ldr	r1, [pc, #184]	; (80017f4 <HAL_RCC_OscConfig+0x68c>)
 800173a:	400a      	ands	r2, r1
 800173c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173e:	f7ff f889 	bl	8000854 <HAL_GetTick>
 8001742:	0003      	movs	r3, r0
 8001744:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001748:	f7ff f884 	bl	8000854 <HAL_GetTick>
 800174c:	0002      	movs	r2, r0
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e086      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175a:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	2380      	movs	r3, #128	; 0x80
 8001760:	049b      	lsls	r3, r3, #18
 8001762:	4013      	ands	r3, r2
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001766:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176a:	220f      	movs	r2, #15
 800176c:	4393      	bics	r3, r2
 800176e:	0019      	movs	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001776:	430a      	orrs	r2, r1
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	4a1e      	ldr	r2, [pc, #120]	; (80017f8 <HAL_RCC_OscConfig+0x690>)
 8001780:	4013      	ands	r3, r2
 8001782:	0019      	movs	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	431a      	orrs	r2, r3
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001790:	430a      	orrs	r2, r1
 8001792:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 800179a:	2180      	movs	r1, #128	; 0x80
 800179c:	0449      	lsls	r1, r1, #17
 800179e:	430a      	orrs	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a2:	f7ff f857 	bl	8000854 <HAL_GetTick>
 80017a6:	0003      	movs	r3, r0
 80017a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff f852 	bl	8000854 <HAL_GetTick>
 80017b0:	0002      	movs	r2, r0
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e054      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	049b      	lsls	r3, r3, #18
 80017c6:	4013      	ands	r3, r2
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x644>
 80017ca:	e04c      	b.n	8001866 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 80017d2:	4908      	ldr	r1, [pc, #32]	; (80017f4 <HAL_RCC_OscConfig+0x68c>)
 80017d4:	400a      	ands	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff f83c 	bl	8000854 <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e0:	e015      	b.n	800180e <HAL_RCC_OscConfig+0x6a6>
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	40021000 	.word	0x40021000
 80017e8:	00001388 	.word	0x00001388
 80017ec:	efffffff 	.word	0xefffffff
 80017f0:	fffeffff 	.word	0xfffeffff
 80017f4:	feffffff 	.word	0xfeffffff
 80017f8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff f82a 	bl	8000854 <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e02c      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_RCC_OscConfig+0x708>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	049b      	lsls	r3, r3, #18
 8001816:	4013      	ands	r3, r2
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x694>
 800181a:	e024      	b.n	8001866 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e01f      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_RCC_OscConfig+0x708>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_RCC_OscConfig+0x708>)
 8001830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001832:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	23c0      	movs	r3, #192	; 0xc0
 8001838:	025b      	lsls	r3, r3, #9
 800183a:	401a      	ands	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	429a      	cmp	r2, r3
 8001842:	d10e      	bne.n	8001862 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	220f      	movs	r2, #15
 8001848:	401a      	ands	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d107      	bne.n	8001862 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	23f0      	movs	r3, #240	; 0xf0
 8001856:	039b      	lsls	r3, r3, #14
 8001858:	401a      	ands	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800185e:	429a      	cmp	r2, r3
 8001860:	d001      	beq.n	8001866 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	0018      	movs	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	b008      	add	sp, #32
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40021000 	.word	0x40021000

08001874 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0bf      	b.n	8001a08 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001888:	4b61      	ldr	r3, [pc, #388]	; (8001a10 <HAL_RCC_ClockConfig+0x19c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2201      	movs	r2, #1
 800188e:	4013      	ands	r3, r2
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d911      	bls.n	80018ba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b5e      	ldr	r3, [pc, #376]	; (8001a10 <HAL_RCC_ClockConfig+0x19c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2201      	movs	r2, #1
 800189c:	4393      	bics	r3, r2
 800189e:	0019      	movs	r1, r3
 80018a0:	4b5b      	ldr	r3, [pc, #364]	; (8001a10 <HAL_RCC_ClockConfig+0x19c>)
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a8:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <HAL_RCC_ClockConfig+0x19c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2201      	movs	r2, #1
 80018ae:	4013      	ands	r3, r2
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e0a6      	b.n	8001a08 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2202      	movs	r2, #2
 80018c0:	4013      	ands	r3, r2
 80018c2:	d015      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2204      	movs	r2, #4
 80018ca:	4013      	ands	r3, r2
 80018cc:	d006      	beq.n	80018dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018ce:	4b51      	ldr	r3, [pc, #324]	; (8001a14 <HAL_RCC_ClockConfig+0x1a0>)
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_RCC_ClockConfig+0x1a0>)
 80018d4:	21e0      	movs	r1, #224	; 0xe0
 80018d6:	00c9      	lsls	r1, r1, #3
 80018d8:	430a      	orrs	r2, r1
 80018da:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018dc:	4b4d      	ldr	r3, [pc, #308]	; (8001a14 <HAL_RCC_ClockConfig+0x1a0>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	22f0      	movs	r2, #240	; 0xf0
 80018e2:	4393      	bics	r3, r2
 80018e4:	0019      	movs	r1, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	4b4a      	ldr	r3, [pc, #296]	; (8001a14 <HAL_RCC_ClockConfig+0x1a0>)
 80018ec:	430a      	orrs	r2, r1
 80018ee:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2201      	movs	r2, #1
 80018f6:	4013      	ands	r3, r2
 80018f8:	d04c      	beq.n	8001994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	4b44      	ldr	r3, [pc, #272]	; (8001a14 <HAL_RCC_ClockConfig+0x1a0>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	029b      	lsls	r3, r3, #10
 800190a:	4013      	ands	r3, r2
 800190c:	d120      	bne.n	8001950 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e07a      	b.n	8001a08 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <HAL_RCC_ClockConfig+0x1a0>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	049b      	lsls	r3, r3, #18
 8001922:	4013      	ands	r3, r2
 8001924:	d114      	bne.n	8001950 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e06e      	b.n	8001a08 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001932:	4b38      	ldr	r3, [pc, #224]	; (8001a14 <HAL_RCC_ClockConfig+0x1a0>)
 8001934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	025b      	lsls	r3, r3, #9
 800193a:	4013      	ands	r3, r2
 800193c:	d108      	bne.n	8001950 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e062      	b.n	8001a08 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001942:	4b34      	ldr	r3, [pc, #208]	; (8001a14 <HAL_RCC_ClockConfig+0x1a0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2202      	movs	r2, #2
 8001948:	4013      	ands	r3, r2
 800194a:	d101      	bne.n	8001950 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e05b      	b.n	8001a08 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001950:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <HAL_RCC_ClockConfig+0x1a0>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2203      	movs	r2, #3
 8001956:	4393      	bics	r3, r2
 8001958:	0019      	movs	r1, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <HAL_RCC_ClockConfig+0x1a0>)
 8001960:	430a      	orrs	r2, r1
 8001962:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001964:	f7fe ff76 	bl	8000854 <HAL_GetTick>
 8001968:	0003      	movs	r3, r0
 800196a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196c:	e009      	b.n	8001982 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196e:	f7fe ff71 	bl	8000854 <HAL_GetTick>
 8001972:	0002      	movs	r2, r0
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	4a27      	ldr	r2, [pc, #156]	; (8001a18 <HAL_RCC_ClockConfig+0x1a4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e042      	b.n	8001a08 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_RCC_ClockConfig+0x1a0>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	220c      	movs	r2, #12
 8001988:	401a      	ands	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	429a      	cmp	r2, r3
 8001992:	d1ec      	bne.n	800196e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <HAL_RCC_ClockConfig+0x19c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2201      	movs	r2, #1
 800199a:	4013      	ands	r3, r2
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d211      	bcs.n	80019c6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_RCC_ClockConfig+0x19c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2201      	movs	r2, #1
 80019a8:	4393      	bics	r3, r2
 80019aa:	0019      	movs	r1, r3
 80019ac:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_RCC_ClockConfig+0x19c>)
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_RCC_ClockConfig+0x19c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2201      	movs	r2, #1
 80019ba:	4013      	ands	r3, r2
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d001      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e020      	b.n	8001a08 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2204      	movs	r2, #4
 80019cc:	4013      	ands	r3, r2
 80019ce:	d009      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019d0:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <HAL_RCC_ClockConfig+0x1a0>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	4a11      	ldr	r2, [pc, #68]	; (8001a1c <HAL_RCC_ClockConfig+0x1a8>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	0019      	movs	r1, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <HAL_RCC_ClockConfig+0x1a0>)
 80019e0:	430a      	orrs	r2, r1
 80019e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019e4:	f000 f820 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 80019e8:	0001      	movs	r1, r0
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_RCC_ClockConfig+0x1a0>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	220f      	movs	r2, #15
 80019f2:	4013      	ands	r3, r2
 80019f4:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <HAL_RCC_ClockConfig+0x1ac>)
 80019f6:	5cd3      	ldrb	r3, [r2, r3]
 80019f8:	000a      	movs	r2, r1
 80019fa:	40da      	lsrs	r2, r3
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_ClockConfig+0x1b0>)
 80019fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f7fe fee1 	bl	80007c8 <HAL_InitTick>
  
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	0018      	movs	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b004      	add	sp, #16
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40022000 	.word	0x40022000
 8001a14:	40021000 	.word	0x40021000
 8001a18:	00001388 	.word	0x00001388
 8001a1c:	fffff8ff 	.word	0xfffff8ff
 8001a20:	080025d8 	.word	0x080025d8
 8001a24:	20000000 	.word	0x20000000

08001a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b08f      	sub	sp, #60	; 0x3c
 8001a2c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001a2e:	2314      	movs	r3, #20
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	4a37      	ldr	r2, [pc, #220]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001a34:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a36:	c313      	stmia	r3!, {r0, r1, r4}
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	4a35      	ldr	r2, [pc, #212]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xec>)
 8001a40:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a42:	c313      	stmia	r3!, {r0, r1, r4}
 8001a44:	6812      	ldr	r2, [r2, #0]
 8001a46:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a50:	2300      	movs	r3, #0
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a64:	220c      	movs	r2, #12
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d006      	beq.n	8001a7a <HAL_RCC_GetSysClockFreq+0x52>
 8001a6c:	2b0c      	cmp	r3, #12
 8001a6e:	d043      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0xd0>
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d144      	bne.n	8001afe <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a74:	4b29      	ldr	r3, [pc, #164]	; (8001b1c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a78:	e044      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7c:	0c9b      	lsrs	r3, r3, #18
 8001a7e:	220f      	movs	r2, #15
 8001a80:	4013      	ands	r3, r2
 8001a82:	2214      	movs	r2, #20
 8001a84:	18ba      	adds	r2, r7, r2
 8001a86:	5cd3      	ldrb	r3, [r2, r3]
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a8a:	4b23      	ldr	r3, [pc, #140]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	220f      	movs	r2, #15
 8001a90:	4013      	ands	r3, r2
 8001a92:	1d3a      	adds	r2, r7, #4
 8001a94:	5cd3      	ldrb	r3, [r2, r3]
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a9a:	23c0      	movs	r3, #192	; 0xc0
 8001a9c:	025b      	lsls	r3, r3, #9
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	025b      	lsls	r3, r3, #9
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d109      	bne.n	8001abc <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001aaa:	481c      	ldr	r0, [pc, #112]	; (8001b1c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001aac:	f7fe fb34 	bl	8000118 <__udivsi3>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	001a      	movs	r2, r3
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	4353      	muls	r3, r2
 8001ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8001aba:	e01a      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001abe:	23c0      	movs	r3, #192	; 0xc0
 8001ac0:	025b      	lsls	r3, r3, #9
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	23c0      	movs	r3, #192	; 0xc0
 8001ac6:	025b      	lsls	r3, r3, #9
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d109      	bne.n	8001ae0 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ace:	4814      	ldr	r0, [pc, #80]	; (8001b20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ad0:	f7fe fb22 	bl	8000118 <__udivsi3>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	4353      	muls	r3, r2
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ae2:	480e      	ldr	r0, [pc, #56]	; (8001b1c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ae4:	f7fe fb18 	bl	8000118 <__udivsi3>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	001a      	movs	r2, r3
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	4353      	muls	r3, r2
 8001af0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001af6:	e005      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001afa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001afc:	e002      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b02:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b06:	0018      	movs	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b00f      	add	sp, #60	; 0x3c
 8001b0c:	bd90      	pop	{r4, r7, pc}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	080025b8 	.word	0x080025b8
 8001b14:	080025c8 	.word	0x080025c8
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	007a1200 	.word	0x007a1200
 8001b20:	02dc6c00 	.word	0x02dc6c00

08001b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b28:	4b02      	ldr	r3, [pc, #8]	; (8001b34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	20000000 	.word	0x20000000

08001b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001b3c:	f7ff fff2 	bl	8001b24 <HAL_RCC_GetHCLKFreq>
 8001b40:	0001      	movs	r1, r0
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	0a1b      	lsrs	r3, r3, #8
 8001b48:	2207      	movs	r2, #7
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b4e:	5cd3      	ldrb	r3, [r2, r3]
 8001b50:	40d9      	lsrs	r1, r3
 8001b52:	000b      	movs	r3, r1
}    
 8001b54:	0018      	movs	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	080025e8 	.word	0x080025e8

08001b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	025b      	lsls	r3, r3, #9
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d100      	bne.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001b80:	e08f      	b.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001b82:	2317      	movs	r3, #23
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b8a:	4b67      	ldr	r3, [pc, #412]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b8c:	69da      	ldr	r2, [r3, #28]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	055b      	lsls	r3, r3, #21
 8001b92:	4013      	ands	r3, r2
 8001b94:	d111      	bne.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	4b64      	ldr	r3, [pc, #400]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b98:	69da      	ldr	r2, [r3, #28]
 8001b9a:	4b63      	ldr	r3, [pc, #396]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b9c:	2180      	movs	r1, #128	; 0x80
 8001b9e:	0549      	lsls	r1, r1, #21
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	61da      	str	r2, [r3, #28]
 8001ba4:	4b60      	ldr	r3, [pc, #384]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ba6:	69da      	ldr	r2, [r3, #28]
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	055b      	lsls	r3, r3, #21
 8001bac:	4013      	ands	r3, r2
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb2:	2317      	movs	r3, #23
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bba:	4b5c      	ldr	r3, [pc, #368]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d11a      	bne.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc6:	4b59      	ldr	r3, [pc, #356]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b58      	ldr	r3, [pc, #352]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	0049      	lsls	r1, r1, #1
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd4:	f7fe fe3e 	bl	8000854 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bde:	f7fe fe39 	bl	8000854 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b64      	cmp	r3, #100	; 0x64
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e097      	b.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf0:	4b4e      	ldr	r3, [pc, #312]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bfc:	4b4a      	ldr	r3, [pc, #296]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001bfe:	6a1a      	ldr	r2, [r3, #32]
 8001c00:	23c0      	movs	r3, #192	; 0xc0
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4013      	ands	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d034      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	23c0      	movs	r3, #192	; 0xc0
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4013      	ands	r3, r2
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d02c      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c1e:	4b42      	ldr	r3, [pc, #264]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4a43      	ldr	r2, [pc, #268]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c28:	4b3f      	ldr	r3, [pc, #252]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c2a:	6a1a      	ldr	r2, [r3, #32]
 8001c2c:	4b3e      	ldr	r3, [pc, #248]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c2e:	2180      	movs	r1, #128	; 0x80
 8001c30:	0249      	lsls	r1, r1, #9
 8001c32:	430a      	orrs	r2, r1
 8001c34:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c36:	4b3c      	ldr	r3, [pc, #240]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c38:	6a1a      	ldr	r2, [r3, #32]
 8001c3a:	4b3b      	ldr	r3, [pc, #236]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c3c:	493d      	ldr	r1, [pc, #244]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c3e:	400a      	ands	r2, r1
 8001c40:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c42:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d013      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7fe fe00 	bl	8000854 <HAL_GetTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c58:	e009      	b.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7fe fdfb 	bl	8000854 <HAL_GetTick>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	4a34      	ldr	r2, [pc, #208]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e058      	b.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6e:	4b2e      	ldr	r3, [pc, #184]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	2202      	movs	r2, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c78:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4a2c      	ldr	r2, [pc, #176]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	0019      	movs	r1, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c8c:	2317      	movs	r3, #23
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d105      	bne.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c9c:	4927      	ldr	r1, [pc, #156]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d009      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	4393      	bics	r3, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d009      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	2210      	movs	r2, #16
 8001cd0:	4393      	bics	r3, r2
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	029b      	lsls	r3, r3, #10
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d009      	beq.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	2280      	movs	r2, #128	; 0x80
 8001cf0:	4393      	bics	r3, r2
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695a      	ldr	r2, [r3, #20]
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4013      	ands	r3, r2
 8001d08:	d009      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	2240      	movs	r2, #64	; 0x40
 8001d10:	4393      	bics	r3, r2
 8001d12:	0019      	movs	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b006      	add	sp, #24
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	fffffcff 	.word	0xfffffcff
 8001d34:	fffeffff 	.word	0xfffeffff
 8001d38:	00001388 	.word	0x00001388
 8001d3c:	efffffff 	.word	0xefffffff

08001d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e044      	b.n	8001ddc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d107      	bne.n	8001d6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2270      	movs	r2, #112	; 0x70
 8001d5e:	2100      	movs	r1, #0
 8001d60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	0018      	movs	r0, r3
 8001d66:	f7fe fc8b 	bl	8000680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2224      	movs	r2, #36	; 0x24
 8001d6e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	438a      	bics	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	0018      	movs	r0, r3
 8001d84:	f000 f8d8 	bl	8001f38 <UART_SetConfig>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e024      	b.n	8001ddc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f000 fa51 	bl	8002244 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	490d      	ldr	r1, [pc, #52]	; (8001de4 <HAL_UART_Init+0xa4>)
 8001dae:	400a      	ands	r2, r1
 8001db0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	212a      	movs	r1, #42	; 0x2a
 8001dbe:	438a      	bics	r2, r1
 8001dc0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2101      	movs	r1, #1
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f000 fae9 	bl	80023ac <UART_CheckIdleState>
 8001dda:	0003      	movs	r3, r0
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b002      	add	sp, #8
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	ffffb7ff 	.word	0xffffb7ff

08001de8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af02      	add	r7, sp, #8
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	1dbb      	adds	r3, r7, #6
 8001df6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d000      	beq.n	8001e02 <HAL_UART_Transmit+0x1a>
 8001e00:	e095      	b.n	8001f2e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_UART_Transmit+0x28>
 8001e08:	1dbb      	adds	r3, r7, #6
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e08d      	b.n	8001f30 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	015b      	lsls	r3, r3, #5
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d109      	bne.n	8001e34 <HAL_UART_Transmit+0x4c>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d105      	bne.n	8001e34 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d001      	beq.n	8001e34 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e07d      	b.n	8001f30 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2270      	movs	r2, #112	; 0x70
 8001e38:	5c9b      	ldrb	r3, [r3, r2]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_UART_Transmit+0x5a>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e076      	b.n	8001f30 <HAL_UART_Transmit+0x148>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2270      	movs	r2, #112	; 0x70
 8001e46:	2101      	movs	r1, #1
 8001e48:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2221      	movs	r2, #33	; 0x21
 8001e54:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001e56:	f7fe fcfd 	bl	8000854 <HAL_GetTick>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1dba      	adds	r2, r7, #6
 8001e62:	2150      	movs	r1, #80	; 0x50
 8001e64:	8812      	ldrh	r2, [r2, #0]
 8001e66:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1dba      	adds	r2, r7, #6
 8001e6c:	2152      	movs	r1, #82	; 0x52
 8001e6e:	8812      	ldrh	r2, [r2, #0]
 8001e70:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	015b      	lsls	r3, r3, #5
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d108      	bne.n	8001e90 <HAL_UART_Transmit+0xa8>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d104      	bne.n	8001e90 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	e003      	b.n	8001e98 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e98:	e02d      	b.n	8001ef6 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2180      	movs	r1, #128	; 0x80
 8001ea8:	f000 fac6 	bl	8002438 <UART_WaitOnFlagUntilTimeout>
 8001eac:	1e03      	subs	r3, r0, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e03d      	b.n	8001f30 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10b      	bne.n	8001ed2 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	881a      	ldrh	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	05d2      	lsls	r2, r2, #23
 8001ec4:	0dd2      	lsrs	r2, r2, #23
 8001ec6:	b292      	uxth	r2, r2
 8001ec8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	3302      	adds	r3, #2
 8001ece:	61bb      	str	r3, [r7, #24]
 8001ed0:	e008      	b.n	8001ee4 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	b292      	uxth	r2, r2
 8001edc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2252      	movs	r2, #82	; 0x52
 8001ee8:	5a9b      	ldrh	r3, [r3, r2]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b299      	uxth	r1, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2252      	movs	r2, #82	; 0x52
 8001ef4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2252      	movs	r2, #82	; 0x52
 8001efa:	5a9b      	ldrh	r3, [r3, r2]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1cb      	bne.n	8001e9a <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	0013      	movs	r3, r2
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2140      	movs	r1, #64	; 0x40
 8001f10:	f000 fa92 	bl	8002438 <UART_WaitOnFlagUntilTimeout>
 8001f14:	1e03      	subs	r3, r0, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e009      	b.n	8001f30 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2270      	movs	r2, #112	; 0x70
 8001f26:	2100      	movs	r1, #0
 8001f28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8001f2e:	2302      	movs	r3, #2
  }
}
 8001f30:	0018      	movs	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b008      	add	sp, #32
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f44:	2317      	movs	r3, #23
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4aad      	ldr	r2, [pc, #692]	; (8002220 <UART_SetConfig+0x2e8>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	0019      	movs	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4aa8      	ldr	r2, [pc, #672]	; (8002224 <UART_SetConfig+0x2ec>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	4a9f      	ldr	r2, [pc, #636]	; (8002228 <UART_SetConfig+0x2f0>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	0019      	movs	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a9b      	ldr	r2, [pc, #620]	; (800222c <UART_SetConfig+0x2f4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d125      	bne.n	800200e <UART_SetConfig+0xd6>
 8001fc2:	4b9b      	ldr	r3, [pc, #620]	; (8002230 <UART_SetConfig+0x2f8>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d00f      	beq.n	8001fee <UART_SetConfig+0xb6>
 8001fce:	d304      	bcc.n	8001fda <UART_SetConfig+0xa2>
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d011      	beq.n	8001ff8 <UART_SetConfig+0xc0>
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d005      	beq.n	8001fe4 <UART_SetConfig+0xac>
 8001fd8:	e013      	b.n	8002002 <UART_SetConfig+0xca>
 8001fda:	231f      	movs	r3, #31
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	e022      	b.n	800202a <UART_SetConfig+0xf2>
 8001fe4:	231f      	movs	r3, #31
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	2202      	movs	r2, #2
 8001fea:	701a      	strb	r2, [r3, #0]
 8001fec:	e01d      	b.n	800202a <UART_SetConfig+0xf2>
 8001fee:	231f      	movs	r3, #31
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	701a      	strb	r2, [r3, #0]
 8001ff6:	e018      	b.n	800202a <UART_SetConfig+0xf2>
 8001ff8:	231f      	movs	r3, #31
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	e013      	b.n	800202a <UART_SetConfig+0xf2>
 8002002:	231f      	movs	r3, #31
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	2210      	movs	r2, #16
 8002008:	701a      	strb	r2, [r3, #0]
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	e00d      	b.n	800202a <UART_SetConfig+0xf2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a88      	ldr	r2, [pc, #544]	; (8002234 <UART_SetConfig+0x2fc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d104      	bne.n	8002022 <UART_SetConfig+0xea>
 8002018:	231f      	movs	r3, #31
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
 8002020:	e003      	b.n	800202a <UART_SetConfig+0xf2>
 8002022:	231f      	movs	r3, #31
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	2210      	movs	r2, #16
 8002028:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69da      	ldr	r2, [r3, #28]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	021b      	lsls	r3, r3, #8
 8002032:	429a      	cmp	r2, r3
 8002034:	d000      	beq.n	8002038 <UART_SetConfig+0x100>
 8002036:	e07d      	b.n	8002134 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8002038:	231f      	movs	r3, #31
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d01c      	beq.n	800207c <UART_SetConfig+0x144>
 8002042:	dc02      	bgt.n	800204a <UART_SetConfig+0x112>
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <UART_SetConfig+0x11c>
 8002048:	e04b      	b.n	80020e2 <UART_SetConfig+0x1aa>
 800204a:	2b04      	cmp	r3, #4
 800204c:	d025      	beq.n	800209a <UART_SetConfig+0x162>
 800204e:	2b08      	cmp	r3, #8
 8002050:	d037      	beq.n	80020c2 <UART_SetConfig+0x18a>
 8002052:	e046      	b.n	80020e2 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002054:	f7ff fd70 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
 8002058:	0003      	movs	r3, r0
 800205a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	005a      	lsls	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	085b      	lsrs	r3, r3, #1
 8002066:	18d2      	adds	r2, r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	0019      	movs	r1, r3
 800206e:	0010      	movs	r0, r2
 8002070:	f7fe f852 	bl	8000118 <__udivsi3>
 8002074:	0003      	movs	r3, r0
 8002076:	b29b      	uxth	r3, r3
 8002078:	61bb      	str	r3, [r7, #24]
        break;
 800207a:	e037      	b.n	80020ec <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	4a6d      	ldr	r2, [pc, #436]	; (8002238 <UART_SetConfig+0x300>)
 8002084:	189a      	adds	r2, r3, r2
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	0019      	movs	r1, r3
 800208c:	0010      	movs	r0, r2
 800208e:	f7fe f843 	bl	8000118 <__udivsi3>
 8002092:	0003      	movs	r3, r0
 8002094:	b29b      	uxth	r3, r3
 8002096:	61bb      	str	r3, [r7, #24]
        break;
 8002098:	e028      	b.n	80020ec <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800209a:	f7ff fcc5 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 800209e:	0003      	movs	r3, r0
 80020a0:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	005a      	lsls	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	085b      	lsrs	r3, r3, #1
 80020ac:	18d2      	adds	r2, r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	0019      	movs	r1, r3
 80020b4:	0010      	movs	r0, r2
 80020b6:	f7fe f82f 	bl	8000118 <__udivsi3>
 80020ba:	0003      	movs	r3, r0
 80020bc:	b29b      	uxth	r3, r3
 80020be:	61bb      	str	r3, [r7, #24]
        break;
 80020c0:	e014      	b.n	80020ec <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	085b      	lsrs	r3, r3, #1
 80020c8:	2280      	movs	r2, #128	; 0x80
 80020ca:	0252      	lsls	r2, r2, #9
 80020cc:	189a      	adds	r2, r3, r2
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	0019      	movs	r1, r3
 80020d4:	0010      	movs	r0, r2
 80020d6:	f7fe f81f 	bl	8000118 <__udivsi3>
 80020da:	0003      	movs	r3, r0
 80020dc:	b29b      	uxth	r3, r3
 80020de:	61bb      	str	r3, [r7, #24]
        break;
 80020e0:	e004      	b.n	80020ec <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80020e2:	2317      	movs	r3, #23
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
        break;
 80020ea:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b0f      	cmp	r3, #15
 80020f0:	d91b      	bls.n	800212a <UART_SetConfig+0x1f2>
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4a51      	ldr	r2, [pc, #324]	; (800223c <UART_SetConfig+0x304>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d817      	bhi.n	800212a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	200a      	movs	r0, #10
 8002100:	183b      	adds	r3, r7, r0
 8002102:	210f      	movs	r1, #15
 8002104:	438a      	bics	r2, r1
 8002106:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	b29b      	uxth	r3, r3
 800210e:	2207      	movs	r2, #7
 8002110:	4013      	ands	r3, r2
 8002112:	b299      	uxth	r1, r3
 8002114:	183b      	adds	r3, r7, r0
 8002116:	183a      	adds	r2, r7, r0
 8002118:	8812      	ldrh	r2, [r2, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	183a      	adds	r2, r7, r0
 8002124:	8812      	ldrh	r2, [r2, #0]
 8002126:	60da      	str	r2, [r3, #12]
 8002128:	e06c      	b.n	8002204 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800212a:	2317      	movs	r3, #23
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	e067      	b.n	8002204 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8002134:	231f      	movs	r3, #31
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d01b      	beq.n	8002176 <UART_SetConfig+0x23e>
 800213e:	dc02      	bgt.n	8002146 <UART_SetConfig+0x20e>
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <UART_SetConfig+0x218>
 8002144:	e049      	b.n	80021da <UART_SetConfig+0x2a2>
 8002146:	2b04      	cmp	r3, #4
 8002148:	d024      	beq.n	8002194 <UART_SetConfig+0x25c>
 800214a:	2b08      	cmp	r3, #8
 800214c:	d035      	beq.n	80021ba <UART_SetConfig+0x282>
 800214e:	e044      	b.n	80021da <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002150:	f7ff fcf2 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
 8002154:	0003      	movs	r3, r0
 8002156:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	085a      	lsrs	r2, r3, #1
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	18d2      	adds	r2, r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	0019      	movs	r1, r3
 8002168:	0010      	movs	r0, r2
 800216a:	f7fd ffd5 	bl	8000118 <__udivsi3>
 800216e:	0003      	movs	r3, r0
 8002170:	b29b      	uxth	r3, r3
 8002172:	61bb      	str	r3, [r7, #24]
        break;
 8002174:	e036      	b.n	80021e4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	085b      	lsrs	r3, r3, #1
 800217c:	4a30      	ldr	r2, [pc, #192]	; (8002240 <UART_SetConfig+0x308>)
 800217e:	189a      	adds	r2, r3, r2
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	0019      	movs	r1, r3
 8002186:	0010      	movs	r0, r2
 8002188:	f7fd ffc6 	bl	8000118 <__udivsi3>
 800218c:	0003      	movs	r3, r0
 800218e:	b29b      	uxth	r3, r3
 8002190:	61bb      	str	r3, [r7, #24]
        break;
 8002192:	e027      	b.n	80021e4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002194:	f7ff fc48 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 8002198:	0003      	movs	r3, r0
 800219a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	085a      	lsrs	r2, r3, #1
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	18d2      	adds	r2, r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	0019      	movs	r1, r3
 80021ac:	0010      	movs	r0, r2
 80021ae:	f7fd ffb3 	bl	8000118 <__udivsi3>
 80021b2:	0003      	movs	r3, r0
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	61bb      	str	r3, [r7, #24]
        break;
 80021b8:	e014      	b.n	80021e4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	085b      	lsrs	r3, r3, #1
 80021c0:	2280      	movs	r2, #128	; 0x80
 80021c2:	0212      	lsls	r2, r2, #8
 80021c4:	189a      	adds	r2, r3, r2
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	0019      	movs	r1, r3
 80021cc:	0010      	movs	r0, r2
 80021ce:	f7fd ffa3 	bl	8000118 <__udivsi3>
 80021d2:	0003      	movs	r3, r0
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	61bb      	str	r3, [r7, #24]
        break;
 80021d8:	e004      	b.n	80021e4 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80021da:	2317      	movs	r3, #23
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
        break;
 80021e2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2b0f      	cmp	r3, #15
 80021e8:	d908      	bls.n	80021fc <UART_SetConfig+0x2c4>
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	4a13      	ldr	r2, [pc, #76]	; (800223c <UART_SetConfig+0x304>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d804      	bhi.n	80021fc <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	e003      	b.n	8002204 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80021fc:	2317      	movs	r3, #23
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002210:	2317      	movs	r3, #23
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	781b      	ldrb	r3, [r3, #0]
}
 8002216:	0018      	movs	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	b008      	add	sp, #32
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	efff69f3 	.word	0xefff69f3
 8002224:	ffffcfff 	.word	0xffffcfff
 8002228:	fffff4ff 	.word	0xfffff4ff
 800222c:	40013800 	.word	0x40013800
 8002230:	40021000 	.word	0x40021000
 8002234:	40004400 	.word	0x40004400
 8002238:	00f42400 	.word	0x00f42400
 800223c:	0000ffff 	.word	0x0000ffff
 8002240:	007a1200 	.word	0x007a1200

08002244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	2201      	movs	r2, #1
 8002252:	4013      	ands	r3, r2
 8002254:	d00b      	beq.n	800226e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4a4a      	ldr	r2, [pc, #296]	; (8002388 <UART_AdvFeatureConfig+0x144>)
 800225e:	4013      	ands	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	2202      	movs	r2, #2
 8002274:	4013      	ands	r3, r2
 8002276:	d00b      	beq.n	8002290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4a43      	ldr	r2, [pc, #268]	; (800238c <UART_AdvFeatureConfig+0x148>)
 8002280:	4013      	ands	r3, r2
 8002282:	0019      	movs	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	2204      	movs	r2, #4
 8002296:	4013      	ands	r3, r2
 8002298:	d00b      	beq.n	80022b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a3b      	ldr	r2, [pc, #236]	; (8002390 <UART_AdvFeatureConfig+0x14c>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	2208      	movs	r2, #8
 80022b8:	4013      	ands	r3, r2
 80022ba:	d00b      	beq.n	80022d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4a34      	ldr	r2, [pc, #208]	; (8002394 <UART_AdvFeatureConfig+0x150>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	0019      	movs	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	2210      	movs	r2, #16
 80022da:	4013      	ands	r3, r2
 80022dc:	d00b      	beq.n	80022f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a2c      	ldr	r2, [pc, #176]	; (8002398 <UART_AdvFeatureConfig+0x154>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	0019      	movs	r1, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	2220      	movs	r2, #32
 80022fc:	4013      	ands	r3, r2
 80022fe:	d00b      	beq.n	8002318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	4a25      	ldr	r2, [pc, #148]	; (800239c <UART_AdvFeatureConfig+0x158>)
 8002308:	4013      	ands	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	2240      	movs	r2, #64	; 0x40
 800231e:	4013      	ands	r3, r2
 8002320:	d01d      	beq.n	800235e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <UART_AdvFeatureConfig+0x15c>)
 800232a:	4013      	ands	r3, r2
 800232c:	0019      	movs	r1, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	035b      	lsls	r3, r3, #13
 8002342:	429a      	cmp	r2, r3
 8002344:	d10b      	bne.n	800235e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4a15      	ldr	r2, [pc, #84]	; (80023a4 <UART_AdvFeatureConfig+0x160>)
 800234e:	4013      	ands	r3, r2
 8002350:	0019      	movs	r1, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	2280      	movs	r2, #128	; 0x80
 8002364:	4013      	ands	r3, r2
 8002366:	d00b      	beq.n	8002380 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <UART_AdvFeatureConfig+0x164>)
 8002370:	4013      	ands	r3, r2
 8002372:	0019      	movs	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	605a      	str	r2, [r3, #4]
  }
}
 8002380:	46c0      	nop			; (mov r8, r8)
 8002382:	46bd      	mov	sp, r7
 8002384:	b002      	add	sp, #8
 8002386:	bd80      	pop	{r7, pc}
 8002388:	fffdffff 	.word	0xfffdffff
 800238c:	fffeffff 	.word	0xfffeffff
 8002390:	fffbffff 	.word	0xfffbffff
 8002394:	ffff7fff 	.word	0xffff7fff
 8002398:	ffffefff 	.word	0xffffefff
 800239c:	ffffdfff 	.word	0xffffdfff
 80023a0:	ffefffff 	.word	0xffefffff
 80023a4:	ff9fffff 	.word	0xff9fffff
 80023a8:	fff7ffff 	.word	0xfff7ffff

080023ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80023ba:	f7fe fa4b 	bl	8000854 <HAL_GetTick>
 80023be:	0003      	movs	r3, r0
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2208      	movs	r2, #8
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d10d      	bne.n	80023ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	0399      	lsls	r1, r3, #14
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <UART_CheckIdleState+0x88>)
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	0013      	movs	r3, r2
 80023de:	2200      	movs	r2, #0
 80023e0:	f000 f82a 	bl	8002438 <UART_WaitOnFlagUntilTimeout>
 80023e4:	1e03      	subs	r3, r0, #0
 80023e6:	d001      	beq.n	80023ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e01f      	b.n	800242c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2204      	movs	r2, #4
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d10d      	bne.n	8002416 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	03d9      	lsls	r1, r3, #15
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <UART_CheckIdleState+0x88>)
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	0013      	movs	r3, r2
 8002408:	2200      	movs	r2, #0
 800240a:	f000 f815 	bl	8002438 <UART_WaitOnFlagUntilTimeout>
 800240e:	1e03      	subs	r3, r0, #0
 8002410:	d001      	beq.n	8002416 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e00a      	b.n	800242c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2220      	movs	r2, #32
 800241a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2220      	movs	r2, #32
 8002420:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2270      	movs	r2, #112	; 0x70
 8002426:	2100      	movs	r1, #0
 8002428:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	0018      	movs	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	b004      	add	sp, #16
 8002432:	bd80      	pop	{r7, pc}
 8002434:	01ffffff 	.word	0x01ffffff

08002438 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	1dfb      	adds	r3, r7, #7
 8002446:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002448:	e05d      	b.n	8002506 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	3301      	adds	r3, #1
 800244e:	d05a      	beq.n	8002506 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002450:	f7fe fa00 	bl	8000854 <HAL_GetTick>
 8002454:	0002      	movs	r2, r0
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	429a      	cmp	r2, r3
 800245e:	d302      	bcc.n	8002466 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d11b      	bne.n	800249e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	492f      	ldr	r1, [pc, #188]	; (8002530 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002472:	400a      	ands	r2, r1
 8002474:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2101      	movs	r1, #1
 8002482:	438a      	bics	r2, r1
 8002484:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2270      	movs	r2, #112	; 0x70
 8002496:	2100      	movs	r1, #0
 8002498:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e043      	b.n	8002526 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2204      	movs	r2, #4
 80024a6:	4013      	ands	r3, r2
 80024a8:	d02d      	beq.n	8002506 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69da      	ldr	r2, [r3, #28]
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	401a      	ands	r2, r3
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d123      	bne.n	8002506 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	0112      	lsls	r2, r2, #4
 80024c6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4917      	ldr	r1, [pc, #92]	; (8002530 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80024d4:	400a      	ands	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2101      	movs	r1, #1
 80024e4:	438a      	bics	r2, r1
 80024e6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2220      	movs	r2, #32
 80024f2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2220      	movs	r2, #32
 80024f8:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2270      	movs	r2, #112	; 0x70
 80024fe:	2100      	movs	r1, #0
 8002500:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e00f      	b.n	8002526 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	4013      	ands	r3, r2
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	425a      	negs	r2, r3
 8002516:	4153      	adcs	r3, r2
 8002518:	b2db      	uxtb	r3, r3
 800251a:	001a      	movs	r2, r3
 800251c:	1dfb      	adds	r3, r7, #7
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d092      	beq.n	800244a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	0018      	movs	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	b004      	add	sp, #16
 800252c:	bd80      	pop	{r7, pc}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	fffffe5f 	.word	0xfffffe5f

08002534 <__libc_init_array>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	2600      	movs	r6, #0
 8002538:	4d0c      	ldr	r5, [pc, #48]	; (800256c <__libc_init_array+0x38>)
 800253a:	4c0d      	ldr	r4, [pc, #52]	; (8002570 <__libc_init_array+0x3c>)
 800253c:	1b64      	subs	r4, r4, r5
 800253e:	10a4      	asrs	r4, r4, #2
 8002540:	42a6      	cmp	r6, r4
 8002542:	d109      	bne.n	8002558 <__libc_init_array+0x24>
 8002544:	2600      	movs	r6, #0
 8002546:	f000 f821 	bl	800258c <_init>
 800254a:	4d0a      	ldr	r5, [pc, #40]	; (8002574 <__libc_init_array+0x40>)
 800254c:	4c0a      	ldr	r4, [pc, #40]	; (8002578 <__libc_init_array+0x44>)
 800254e:	1b64      	subs	r4, r4, r5
 8002550:	10a4      	asrs	r4, r4, #2
 8002552:	42a6      	cmp	r6, r4
 8002554:	d105      	bne.n	8002562 <__libc_init_array+0x2e>
 8002556:	bd70      	pop	{r4, r5, r6, pc}
 8002558:	00b3      	lsls	r3, r6, #2
 800255a:	58eb      	ldr	r3, [r5, r3]
 800255c:	4798      	blx	r3
 800255e:	3601      	adds	r6, #1
 8002560:	e7ee      	b.n	8002540 <__libc_init_array+0xc>
 8002562:	00b3      	lsls	r3, r6, #2
 8002564:	58eb      	ldr	r3, [r5, r3]
 8002566:	4798      	blx	r3
 8002568:	3601      	adds	r6, #1
 800256a:	e7f2      	b.n	8002552 <__libc_init_array+0x1e>
 800256c:	080025f0 	.word	0x080025f0
 8002570:	080025f0 	.word	0x080025f0
 8002574:	080025f0 	.word	0x080025f0
 8002578:	080025f4 	.word	0x080025f4

0800257c <memset>:
 800257c:	0003      	movs	r3, r0
 800257e:	1812      	adds	r2, r2, r0
 8002580:	4293      	cmp	r3, r2
 8002582:	d100      	bne.n	8002586 <memset+0xa>
 8002584:	4770      	bx	lr
 8002586:	7019      	strb	r1, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	e7f9      	b.n	8002580 <memset+0x4>

0800258c <_init>:
 800258c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002592:	bc08      	pop	{r3}
 8002594:	469e      	mov	lr, r3
 8002596:	4770      	bx	lr

08002598 <_fini>:
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259e:	bc08      	pop	{r3}
 80025a0:	469e      	mov	lr, r3
 80025a2:	4770      	bx	lr
